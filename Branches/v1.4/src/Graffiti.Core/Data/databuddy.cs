#region Flowerbox
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
#endregion

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using DataBuddy;

namespace Graffiti.Core
{
	[Serializable]
	public abstract partial class DataBuddyBase : BaseDataObject
	{}

	#region Category
	/// <summary>
	/// A collection of Category
	/// </summary>
	[Serializable]
	public partial class CategoryCollection : List<Category>
	{
		/// <summary>
		/// Hydrates a collection of Category. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of Category. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				Category obj = new Category ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of Category
		/// </summary>
		public static CategoryCollection FetchAll()
		{
			Query q = Category .CreateQuery();
			CategoryCollection itemCollection = new CategoryCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Category based on the supplied query
		/// </summary>
		public static CategoryCollection FetchByQuery(Query q)
		{
			CategoryCollection itemCollection = new CategoryCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Category based on the supplied query
		/// </summary>
		public static CategoryCollection FetchByColumn(Column column, object value)
		{
			CategoryCollection itemCollection = new CategoryCollection();
			Query q = Category .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_Categories table.
	/// </summary>
	[Serializable]
	public partial class Category : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static Category ()
		{
			_Table = new Table("graffiti_Categories", "Category");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("Name", DbType.String, typeof(System.String), "Name", false, false));
			_Table.Columns.Add(new Column("View", DbType.String, typeof(System.String), "View", false, false));
			_Table.Columns.Add(new Column("PostView", DbType.String, typeof(System.String), "PostView", false, false));
			_Table.Columns.Add(new Column("FormattedName", DbType.String, typeof(System.String), "FormattedName", false, false));
			_Table.Columns.Add(new Column("LinkName", DbType.String, typeof(System.String), "LinkName", false, false));
			_Table.Columns.Add(new Column("FeedUrlOverride", DbType.String, typeof(System.String), "FeedUrlOverride", true, false));
			_Table.Columns.Add(new Column("Body", DbType.String, typeof(System.String), "Body", true, false));
			_Table.Columns.Add(new Column("IsDeleted", DbType.Boolean, typeof(System.Boolean), "IsDeleted", false, false));
			_Table.Columns.Add(new Column("Post_Count", DbType.Int32, typeof(System.Int32), "PostCount", false, false));
			_Table.Columns.Add(new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false));
			_Table.Columns.Add(new Column("ParentId", DbType.Int32, typeof(System.Int32), "ParentId", false, false));
			_Table.Columns.Add(new Column("Type", DbType.Int32, typeof(System.Int32), "Type", false, false));
			_Table.Columns.Add(new Column("ImageUrl", DbType.String, typeof(System.String), "ImageUrl", true, false));
			_Table.Columns.Add(new Column("MetaDescription", DbType.String, typeof(System.String), "MetaDescription", true, false));
			_Table.Columns.Add(new Column("MetaKeywords", DbType.String, typeof(System.String), "MetaKeywords", true, false));
			_Table.Columns.Add(new Column("FeaturedId", DbType.Int32, typeof(System.Int32), "FeaturedId", false, false));
			_Table.Columns.Add(new Column("SortOrderTypeId", DbType.Int32, typeof(System.Int32), "SortOrderTypeId", false, false));
			_Table.Columns.Add(new Column("ExcludeSubCategoryPosts", DbType.Boolean, typeof(System.Boolean), "ExcludeSubCategoryPosts", false, false));
		}

		/// <summary>
		/// Fetches an instance of Category based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static Category FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static Category FetchByQuery(Query q)
		{
			Category item = new Category ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type Category
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public Category (){}
		/// <summary>
		/// Loads an instance of Category for the supplied primary key value
		/// </summary>
		public Category (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of Category. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of Category. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			Name = DataService.GetValue<System.String>(Columns.Name, reader);
			View = DataService.GetValue<System.String>(Columns.View, reader);
			PostView = DataService.GetValue<System.String>(Columns.PostView, reader);
			FormattedName = DataService.GetValue<System.String>(Columns.FormattedName, reader);
			LinkName = DataService.GetValue<System.String>(Columns.LinkName, reader);
			FeedUrlOverride = DataService.GetValue<System.String>(Columns.FeedUrlOverride, reader);
			Body = DataService.GetValue<System.String>(Columns.Body, reader);
			IsDeleted = DataService.GetValue<System.Boolean>(Columns.IsDeleted, reader);
			PostCount = DataService.GetValue<System.Int32>(Columns.PostCount, reader);
			UniqueId = DataService.GetValue<System.Guid>(Columns.UniqueId, reader);
			ParentId = DataService.GetValue<System.Int32>(Columns.ParentId, reader);
			Type = DataService.GetValue<System.Int32>(Columns.Type, reader);
			ImageUrl = DataService.GetValue<System.String>(Columns.ImageUrl, reader);
			MetaDescription = DataService.GetValue<System.String>(Columns.MetaDescription, reader);
			MetaKeywords = DataService.GetValue<System.String>(Columns.MetaKeywords, reader);
			FeaturedId = DataService.GetValue<System.Int32>(Columns.FeaturedId, reader);
			SortOrderTypeId = DataService.GetValue<System.Int32>(Columns.SortOrderTypeId, reader);
			ExcludeSubCategoryPosts = DataService.GetValue<System.Boolean>(Columns.ExcludeSubCategoryPosts, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.String Name

		private System.String _Name;

		public System.String Name
		{
			get{return _Name;}
			set{MarkDirty();_Name = value;}
		}

		#endregion

		#region public System.String View

		private System.String _View;

		public System.String View
		{
			get{return _View;}
			set{MarkDirty();_View = value;}
		}

		#endregion

		#region public System.String PostView

		private System.String _PostView;

		public System.String PostView
		{
			get{return _PostView;}
			set{MarkDirty();_PostView = value;}
		}

		#endregion

		#region public System.String FormattedName

		private System.String _FormattedName;

		public System.String FormattedName
		{
			get{return _FormattedName;}
			set{MarkDirty();_FormattedName = value;}
		}

		#endregion

		#region public System.String LinkName

		private System.String _LinkName;

		public System.String LinkName
		{
			get{return _LinkName;}
			set{MarkDirty();_LinkName = value;}
		}

		#endregion

		#region public System.String FeedUrlOverride

		private System.String _FeedUrlOverride;

		public System.String FeedUrlOverride
		{
			get{return _FeedUrlOverride;}
			set{MarkDirty();_FeedUrlOverride = value;}
		}

		#endregion

		#region public System.String Body

		private System.String _Body;

		public System.String Body
		{
			get{return _Body;}
			set{MarkDirty();_Body = value;}
		}

		#endregion

		#region public System.Boolean IsDeleted

		private System.Boolean _IsDeleted;

		public System.Boolean IsDeleted
		{
			get{return _IsDeleted;}
			set{MarkDirty();_IsDeleted = value;}
		}

		#endregion

		#region public System.Int32 PostCount

		private System.Int32 _PostCount;

		public System.Int32 PostCount
		{
			get{return _PostCount;}
			set{MarkDirty();_PostCount = value;}
		}

		#endregion

		#region public System.Guid UniqueId

		private System.Guid _UniqueId;

		public System.Guid UniqueId
		{
			get{return _UniqueId;}
			set{MarkDirty();_UniqueId = value;}
		}

		#endregion

		#region public System.Int32 ParentId

		private System.Int32 _ParentId;

		public System.Int32 ParentId
		{
			get{return _ParentId;}
			set{MarkDirty();_ParentId = value;}
		}

		#endregion

		#region public System.Int32 Type

		private System.Int32 _Type;

		public System.Int32 Type
		{
			get{return _Type;}
			set{MarkDirty();_Type = value;}
		}

		#endregion

		#region public System.String ImageUrl

		private System.String _ImageUrl;

		public System.String ImageUrl
		{
			get{return _ImageUrl;}
			set{MarkDirty();_ImageUrl = value;}
		}

		#endregion

		#region public System.String MetaDescription

		private System.String _MetaDescription;

		public System.String MetaDescription
		{
			get{return _MetaDescription;}
			set{MarkDirty();_MetaDescription = value;}
		}

		#endregion

		#region public System.String MetaKeywords

		private System.String _MetaKeywords;

		public System.String MetaKeywords
		{
			get{return _MetaKeywords;}
			set{MarkDirty();_MetaKeywords = value;}
		}

		#endregion

		#region public System.Int32 FeaturedId

		private System.Int32 _FeaturedId;

		public System.Int32 FeaturedId
		{
			get{return _FeaturedId;}
			set{MarkDirty();_FeaturedId = value;}
		}

		#endregion

		#region public System.Int32 SortOrderTypeId

		private System.Int32 _SortOrderTypeId;

		public System.Int32 SortOrderTypeId
		{
			get{return _SortOrderTypeId;}
			set{MarkDirty();_SortOrderTypeId = value;}
		}

		#endregion

		#region public System.Boolean ExcludeSubCategoryPosts

		private System.Boolean _ExcludeSubCategoryPosts;

		public System.Boolean ExcludeSubCategoryPosts
		{
			get{return _ExcludeSubCategoryPosts;}
			set{MarkDirty();_ExcludeSubCategoryPosts = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents Category
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent Category
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column Name = new Column("Name", DbType.String, typeof(System.String), "Name", false, false);
			public static readonly Column View = new Column("View", DbType.String, typeof(System.String), "View", false, false);
			public static readonly Column PostView = new Column("PostView", DbType.String, typeof(System.String), "PostView", false, false);
			public static readonly Column FormattedName = new Column("FormattedName", DbType.String, typeof(System.String), "FormattedName", false, false);
			public static readonly Column LinkName = new Column("LinkName", DbType.String, typeof(System.String), "LinkName", false, false);
			public static readonly Column FeedUrlOverride = new Column("FeedUrlOverride", DbType.String, typeof(System.String), "FeedUrlOverride", true, false);
			public static readonly Column Body = new Column("Body", DbType.String, typeof(System.String), "Body", true, false);
			public static readonly Column IsDeleted = new Column("IsDeleted", DbType.Boolean, typeof(System.Boolean), "IsDeleted", false, false);
			public static readonly Column PostCount = new Column("Post_Count", DbType.Int32, typeof(System.Int32), "PostCount", false, false);
			public static readonly Column UniqueId = new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false);
			public static readonly Column ParentId = new Column("ParentId", DbType.Int32, typeof(System.Int32), "ParentId", false, false);
			public static readonly Column Type = new Column("Type", DbType.Int32, typeof(System.Int32), "Type", false, false);
			public static readonly Column ImageUrl = new Column("ImageUrl", DbType.String, typeof(System.String), "ImageUrl", true, false);
			public static readonly Column MetaDescription = new Column("MetaDescription", DbType.String, typeof(System.String), "MetaDescription", true, false);
			public static readonly Column MetaKeywords = new Column("MetaKeywords", DbType.String, typeof(System.String), "MetaKeywords", true, false);
			public static readonly Column FeaturedId = new Column("FeaturedId", DbType.Int32, typeof(System.Int32), "FeaturedId", false, false);
			public static readonly Column SortOrderTypeId = new Column("SortOrderTypeId", DbType.Int32, typeof(System.Int32), "SortOrderTypeId", false, false);
			public static readonly Column ExcludeSubCategoryPosts = new Column("ExcludeSubCategoryPosts", DbType.Boolean, typeof(System.Boolean), "ExcludeSubCategoryPosts", false, false);
		}

		public static int Delete(Column column, object value)
		{
			Category objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(false);
				int i = DataService.Delete(Table,column,value);
				objectToDelete.AfterRemove(false);
				return i;
			}

			return 0;
		}

		public static int Delete(object value)
		{
			return Delete(Columns.Id,value);
		}

		public static int Destroy(Column column, object value)
		{
			Category objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			Parameter pName = new Parameter( "Name", null, DbType.String );
			pName.Length = 255;
			parameters.Add( pName );

			Parameter pView = new Parameter( "View", null, DbType.String );
			pView.Length = 64;
			parameters.Add( pView );

			Parameter pPostView = new Parameter( "PostView", null, DbType.String );
			pPostView.Length = 64;
			parameters.Add( pPostView );

			Parameter pFormattedName = new Parameter( "FormattedName", null, DbType.String );
			pFormattedName.Length = 255;
			parameters.Add( pFormattedName );

			Parameter pLinkName = new Parameter( "LinkName", null, DbType.String );
			pLinkName.Length = 255;
			parameters.Add( pLinkName );

			Parameter pFeedUrlOverride = new Parameter( "FeedUrlOverride", null, DbType.String );
			pFeedUrlOverride.Length = 255;
			parameters.Add( pFeedUrlOverride );

			Parameter pBody = new Parameter( "Body", null, DbType.String );
			pBody.Length = 2147483647;
			parameters.Add( pBody );

			parameters.Add( new Parameter( "IsDeleted", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "Post_Count", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "UniqueId", null, DbType.Guid ) );

			parameters.Add( new Parameter( "ParentId", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "Type", null, DbType.Int32 ) );

			Parameter pImageUrl = new Parameter( "ImageUrl", null, DbType.String );
			pImageUrl.Length = 255;
			parameters.Add( pImageUrl );

			Parameter pMetaDescription = new Parameter( "MetaDescription", null, DbType.String );
			pMetaDescription.Length = 255;
			parameters.Add( pMetaDescription );

			Parameter pMetaKeywords = new Parameter( "MetaKeywords", null, DbType.String );
			pMetaKeywords.Length = 255;
			parameters.Add( pMetaKeywords );

			parameters.Add( new Parameter( "FeaturedId", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "SortOrderTypeId", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "ExcludeSubCategoryPosts", null, DbType.Boolean ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			Parameter pName = new Parameter("Name", Name, DbType.String);
			pName.Length = 255;
			parameters.Add( pName );

			Parameter pView = new Parameter("View", View, DbType.String);
			pView.Length = 64;
			parameters.Add( pView );

			Parameter pPostView = new Parameter("PostView", PostView, DbType.String);
			pPostView.Length = 64;
			parameters.Add( pPostView );

			Parameter pFormattedName = new Parameter("FormattedName", FormattedName, DbType.String);
			pFormattedName.Length = 255;
			parameters.Add( pFormattedName );

			Parameter pLinkName = new Parameter("LinkName", LinkName, DbType.String);
			pLinkName.Length = 255;
			parameters.Add( pLinkName );

			Parameter pFeedUrlOverride = new Parameter("FeedUrlOverride", FeedUrlOverride, DbType.String);
			pFeedUrlOverride.Length = 255;
			parameters.Add( pFeedUrlOverride );

			Parameter pBody = new Parameter("Body", Body, DbType.String);
			pBody.Length = 2147483647;
			parameters.Add( pBody );

			parameters.Add( new Parameter("IsDeleted", IsDeleted, DbType.Boolean) );

			parameters.Add( new Parameter("Post_Count", PostCount, DbType.Int32) );

			parameters.Add( new Parameter("UniqueId", UniqueId, DbType.Guid) );

			parameters.Add( new Parameter("ParentId", ParentId, DbType.Int32) );

			parameters.Add( new Parameter("Type", Type, DbType.Int32) );

			Parameter pImageUrl = new Parameter("ImageUrl", ImageUrl, DbType.String);
			pImageUrl.Length = 255;
			parameters.Add( pImageUrl );

			Parameter pMetaDescription = new Parameter("MetaDescription", MetaDescription, DbType.String);
			pMetaDescription.Length = 255;
			parameters.Add( pMetaDescription );

			Parameter pMetaKeywords = new Parameter("MetaKeywords", MetaKeywords, DbType.String);
			pMetaKeywords.Length = 255;
			parameters.Add( pMetaKeywords );

			parameters.Add( new Parameter("FeaturedId", FeaturedId, DbType.Int32) );

			parameters.Add( new Parameter("SortOrderTypeId", SortOrderTypeId, DbType.Int32) );

			parameters.Add( new Parameter("ExcludeSubCategoryPosts", ExcludeSubCategoryPosts, DbType.Boolean) );

			return parameters;
		}
	}
	#endregion

	#region Comment
	/// <summary>
	/// A collection of Comment
	/// </summary>
	[Serializable]
	public partial class CommentCollection : List<Comment>
	{
		/// <summary>
		/// Hydrates a collection of Comment. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of Comment. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				Comment obj = new Comment ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of Comment
		/// </summary>
		public static CommentCollection FetchAll()
		{
			Query q = Comment .CreateQuery();
			CommentCollection itemCollection = new CommentCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Comment based on the supplied query
		/// </summary>
		public static CommentCollection FetchByQuery(Query q)
		{
			CommentCollection itemCollection = new CommentCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Comment based on the supplied query
		/// </summary>
		public static CommentCollection FetchByColumn(Column column, object value)
		{
			CommentCollection itemCollection = new CommentCollection();
			Query q = Comment .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_Comments table.
	/// </summary>
	[Serializable]
	public partial class Comment : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static Comment ()
		{
			_Table = new Table("graffiti_Comments", "Comment");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("PostId", DbType.Int32, typeof(System.Int32), "PostId", false, false));
			_Table.Columns.Add(new Column("Body", DbType.String, typeof(System.String), "Body", false, false));
			_Table.Columns.Add(new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", true, false));
			_Table.Columns.Add(new Column("Published", DbType.DateTime, typeof(System.DateTime), "Published", false, false));
			_Table.Columns.Add(new Column("Name", DbType.String, typeof(System.String), "Name", false, false));
			_Table.Columns.Add(new Column("IsPublished", DbType.Boolean, typeof(System.Boolean), "IsPublished", false, false));
			_Table.Columns.Add(new Column("Version", DbType.Int32, typeof(System.Int32), "Version", false, false));
			_Table.Columns.Add(new Column("WebSite", DbType.String, typeof(System.String), "WebSite", true, false));
			_Table.Columns.Add(new Column("SpamScore", DbType.Int32, typeof(System.Int32), "SpamScore", false, false));
			_Table.Columns.Add(new Column("IPAddress", DbType.String, typeof(System.String), "IPAddress", true, false));
			_Table.Columns.Add(new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false));
			_Table.Columns.Add(new Column("ModifiedBy", DbType.String, typeof(System.String), "ModifiedBy", true, false));
			_Table.Columns.Add(new Column("Email", DbType.String, typeof(System.String), "Email", true, false));
			_Table.Columns.Add(new Column("IsDeleted", DbType.Boolean, typeof(System.Boolean), "IsDeleted", false, false));
			_Table.Columns.Add(new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false));
			_Table.Columns.Add(new Column("UserName", DbType.String, typeof(System.String), "UserName", true, false));
			_Table.Columns.Add(new Column("IsTrackback", DbType.Boolean, typeof(System.Boolean), "IsTrackback", false, false));
		}

		/// <summary>
		/// Fetches an instance of Comment based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static Comment FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static Comment FetchByQuery(Query q)
		{
			Comment item = new Comment ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type Comment
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public Comment (){}
		/// <summary>
		/// Loads an instance of Comment for the supplied primary key value
		/// </summary>
		public Comment (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of Comment. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of Comment. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			PostId = DataService.GetValue<System.Int32>(Columns.PostId, reader);
			Body = DataService.GetValue<System.String>(Columns.Body, reader);
			CreatedBy = DataService.GetValue<System.String>(Columns.CreatedBy, reader);
			Published = DataService.GetValue<System.DateTime>(Columns.Published, reader);
			Name = DataService.GetValue<System.String>(Columns.Name, reader);
			IsPublished = DataService.GetValue<System.Boolean>(Columns.IsPublished, reader);
			Version = DataService.GetValue<System.Int32>(Columns.Version, reader);
			WebSite = DataService.GetValue<System.String>(Columns.WebSite, reader);
			SpamScore = DataService.GetValue<System.Int32>(Columns.SpamScore, reader);
			IPAddress = DataService.GetValue<System.String>(Columns.IPAddress, reader);
			ModifiedOn = DataService.GetValue<System.DateTime>(Columns.ModifiedOn, reader);
			ModifiedBy = DataService.GetValue<System.String>(Columns.ModifiedBy, reader);
			Email = DataService.GetValue<System.String>(Columns.Email, reader);
			IsDeleted = DataService.GetValue<System.Boolean>(Columns.IsDeleted, reader);
			UniqueId = DataService.GetValue<System.Guid>(Columns.UniqueId, reader);
			UserName = DataService.GetValue<System.String>(Columns.UserName, reader);
			IsTrackback = DataService.GetValue<System.Boolean>(Columns.IsTrackback, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.Int32 PostId

		private System.Int32 _PostId;

		public System.Int32 PostId
		{
			get{return _PostId;}
			set{MarkDirty();_PostId = value;}
		}

		#endregion

		#region public System.String Body

		private System.String _Body;

		public System.String Body
		{
			get{return _Body;}
			set{MarkDirty();_Body = value;}
		}

		#endregion

		#region public System.String CreatedBy

		private System.String _CreatedBy;

		public System.String CreatedBy
		{
			get{return _CreatedBy;}
			set{MarkDirty();_CreatedBy = value;}
		}

		#endregion

		#region public System.DateTime Published

		private System.DateTime _Published;

		public System.DateTime Published
		{
			get{return _Published;}
			set{MarkDirty();_Published = value;}
		}

		#endregion

		#region public System.String Name

		private System.String _Name;

		public System.String Name
		{
			get{return _Name;}
			set{MarkDirty();_Name = value;}
		}

		#endregion

		#region public System.Boolean IsPublished

		private System.Boolean _IsPublished;

		public System.Boolean IsPublished
		{
			get{return _IsPublished;}
			set{MarkDirty();_IsPublished = value;}
		}

		#endregion

		#region public System.Int32 Version

		private System.Int32 _Version;

		public System.Int32 Version
		{
			get{return _Version;}
			set{MarkDirty();_Version = value;}
		}

		#endregion

		#region public System.String WebSite

		private System.String _WebSite;

		public System.String WebSite
		{
			get{return _WebSite;}
			set{MarkDirty();_WebSite = value;}
		}

		#endregion

		#region public System.Int32 SpamScore

		private System.Int32 _SpamScore;

		public System.Int32 SpamScore
		{
			get{return _SpamScore;}
			set{MarkDirty();_SpamScore = value;}
		}

		#endregion

		#region public System.String IPAddress

		private System.String _IPAddress;

		public System.String IPAddress
		{
			get{return _IPAddress;}
			set{MarkDirty();_IPAddress = value;}
		}

		#endregion

		#region public System.DateTime ModifiedOn

		private System.DateTime _ModifiedOn;

		public System.DateTime ModifiedOn
		{
			get{return _ModifiedOn;}
			set{MarkDirty();_ModifiedOn = value;}
		}

		#endregion

		#region public System.String ModifiedBy

		private System.String _ModifiedBy;

		public System.String ModifiedBy
		{
			get{return _ModifiedBy;}
			set{MarkDirty();_ModifiedBy = value;}
		}

		#endregion

		#region public System.String Email

		private System.String _Email;

		public System.String Email
		{
			get{return _Email;}
			set{MarkDirty();_Email = value;}
		}

		#endregion

		#region public System.Boolean IsDeleted

		private System.Boolean _IsDeleted;

		public System.Boolean IsDeleted
		{
			get{return _IsDeleted;}
			set{MarkDirty();_IsDeleted = value;}
		}

		#endregion

		#region public System.Guid UniqueId

		private System.Guid _UniqueId;

		public System.Guid UniqueId
		{
			get{return _UniqueId;}
			set{MarkDirty();_UniqueId = value;}
		}

		#endregion

		#region public System.String UserName

		private System.String _UserName;

		public System.String UserName
		{
			get{return _UserName;}
			set{MarkDirty();_UserName = value;}
		}

		#endregion

		#region public System.Boolean IsTrackback

		private System.Boolean _IsTrackback;

		public System.Boolean IsTrackback
		{
			get{return _IsTrackback;}
			set{MarkDirty();_IsTrackback = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents Comment
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent Comment
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column PostId = new Column("PostId", DbType.Int32, typeof(System.Int32), "PostId", false, false);
			public static readonly Column Body = new Column("Body", DbType.String, typeof(System.String), "Body", false, false);
			public static readonly Column CreatedBy = new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", true, false);
			public static readonly Column Published = new Column("Published", DbType.DateTime, typeof(System.DateTime), "Published", false, false);
			public static readonly Column Name = new Column("Name", DbType.String, typeof(System.String), "Name", false, false);
			public static readonly Column IsPublished = new Column("IsPublished", DbType.Boolean, typeof(System.Boolean), "IsPublished", false, false);
			public static readonly Column Version = new Column("Version", DbType.Int32, typeof(System.Int32), "Version", false, false);
			public static readonly Column WebSite = new Column("WebSite", DbType.String, typeof(System.String), "WebSite", true, false);
			public static readonly Column SpamScore = new Column("SpamScore", DbType.Int32, typeof(System.Int32), "SpamScore", false, false);
			public static readonly Column IPAddress = new Column("IPAddress", DbType.String, typeof(System.String), "IPAddress", true, false);
			public static readonly Column ModifiedOn = new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false);
			public static readonly Column ModifiedBy = new Column("ModifiedBy", DbType.String, typeof(System.String), "ModifiedBy", true, false);
			public static readonly Column Email = new Column("Email", DbType.String, typeof(System.String), "Email", true, false);
			public static readonly Column IsDeleted = new Column("IsDeleted", DbType.Boolean, typeof(System.Boolean), "IsDeleted", false, false);
			public static readonly Column UniqueId = new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false);
			public static readonly Column UserName = new Column("UserName", DbType.String, typeof(System.String), "UserName", true, false);
			public static readonly Column IsTrackback = new Column("IsTrackback", DbType.Boolean, typeof(System.Boolean), "IsTrackback", false, false);
		}

		public static int Delete(Column column, object value)
		{
			Comment objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(false);
				int i = DataService.Delete(Table,column,value);
				objectToDelete.AfterRemove(false);
				return i;
			}

			return 0;
		}

		public static int Delete(object value)
		{
			return Delete(Columns.Id,value);
		}

		public static int Destroy(Column column, object value)
		{
			Comment objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "PostId", null, DbType.Int32 ) );

			Parameter pBody = new Parameter( "Body", null, DbType.String );
			pBody.Length = 4000;
			parameters.Add( pBody );

			Parameter pCreatedBy = new Parameter( "CreatedBy", null, DbType.String );
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter( "Published", null, DbType.DateTime ) );

			Parameter pName = new Parameter( "Name", null, DbType.String );
			pName.Length = 128;
			parameters.Add( pName );

			parameters.Add( new Parameter( "IsPublished", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "Version", null, DbType.Int32 ) );

			Parameter pWebSite = new Parameter( "WebSite", null, DbType.String );
			pWebSite.Length = 512;
			parameters.Add( pWebSite );

			parameters.Add( new Parameter( "SpamScore", null, DbType.Int32 ) );

			Parameter pIPAddress = new Parameter( "IPAddress", null, DbType.String );
			pIPAddress.Length = 64;
			parameters.Add( pIPAddress );

			parameters.Add( new Parameter( "ModifiedOn", null, DbType.DateTime ) );

			Parameter pModifiedBy = new Parameter( "ModifiedBy", null, DbType.String );
			pModifiedBy.Length = 128;
			parameters.Add( pModifiedBy );

			Parameter pEmail = new Parameter( "Email", null, DbType.String );
			pEmail.Length = 128;
			parameters.Add( pEmail );

			parameters.Add( new Parameter( "IsDeleted", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "UniqueId", null, DbType.Guid ) );

			Parameter pUserName = new Parameter( "UserName", null, DbType.String );
			pUserName.Length = 128;
			parameters.Add( pUserName );

			parameters.Add( new Parameter( "IsTrackback", null, DbType.Boolean ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			parameters.Add( new Parameter("PostId", PostId, DbType.Int32) );

			Parameter pBody = new Parameter("Body", Body, DbType.String);
			pBody.Length = 4000;
			parameters.Add( pBody );

			Parameter pCreatedBy = new Parameter("CreatedBy", CreatedBy, DbType.String);
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter("Published", Published, DbType.DateTime) );

			Parameter pName = new Parameter("Name", Name, DbType.String);
			pName.Length = 128;
			parameters.Add( pName );

			parameters.Add( new Parameter("IsPublished", IsPublished, DbType.Boolean) );

			parameters.Add( new Parameter("Version", Version, DbType.Int32) );

			Parameter pWebSite = new Parameter("WebSite", WebSite, DbType.String);
			pWebSite.Length = 512;
			parameters.Add( pWebSite );

			parameters.Add( new Parameter("SpamScore", SpamScore, DbType.Int32) );

			Parameter pIPAddress = new Parameter("IPAddress", IPAddress, DbType.String);
			pIPAddress.Length = 64;
			parameters.Add( pIPAddress );

			parameters.Add( new Parameter("ModifiedOn", ModifiedOn, DbType.DateTime) );

			Parameter pModifiedBy = new Parameter("ModifiedBy", ModifiedBy, DbType.String);
			pModifiedBy.Length = 128;
			parameters.Add( pModifiedBy );

			Parameter pEmail = new Parameter("Email", Email, DbType.String);
			pEmail.Length = 128;
			parameters.Add( pEmail );

			parameters.Add( new Parameter("IsDeleted", IsDeleted, DbType.Boolean) );

			parameters.Add( new Parameter("UniqueId", UniqueId, DbType.Guid) );

			Parameter pUserName = new Parameter("UserName", UserName, DbType.String);
			pUserName.Length = 128;
			parameters.Add( pUserName );

			parameters.Add( new Parameter("IsTrackback", IsTrackback, DbType.Boolean) );

			return parameters;
		}
	}
	#endregion

	#region Log
	/// <summary>
	/// A collection of Log
	/// </summary>
	[Serializable]
	public partial class LogCollection : List<Log>
	{
		/// <summary>
		/// Hydrates a collection of Log. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of Log. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				Log obj = new Log ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of Log
		/// </summary>
		public static LogCollection FetchAll()
		{
			Query q = Log .CreateQuery();
			LogCollection itemCollection = new LogCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Log based on the supplied query
		/// </summary>
		public static LogCollection FetchByQuery(Query q)
		{
			LogCollection itemCollection = new LogCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Log based on the supplied query
		/// </summary>
		public static LogCollection FetchByColumn(Column column, object value)
		{
			LogCollection itemCollection = new LogCollection();
			Query q = Log .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_Logs table.
	/// </summary>
	[Serializable]
	public partial class Log : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static Log ()
		{
			_Table = new Table("graffiti_Logs", "Log");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("Type", DbType.Int32, typeof(System.Int32), "Type", false, false));
			_Table.Columns.Add(new Column("Title", DbType.String, typeof(System.String), "Title", false, false));
			_Table.Columns.Add(new Column("Message", DbType.String, typeof(System.String), "Message", false, false));
			_Table.Columns.Add(new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", false, false));
			_Table.Columns.Add(new Column("CreatedOn", DbType.DateTime, typeof(System.DateTime), "CreatedOn", false, false));
		}

		/// <summary>
		/// Fetches an instance of Log based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static Log FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static Log FetchByQuery(Query q)
		{
			Log item = new Log ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type Log
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public Log (){}
		/// <summary>
		/// Loads an instance of Log for the supplied primary key value
		/// </summary>
		public Log (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of Log. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of Log. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			Type = DataService.GetValue<System.Int32>(Columns.Type, reader);
			Title = DataService.GetValue<System.String>(Columns.Title, reader);
			Message = DataService.GetValue<System.String>(Columns.Message, reader);
			CreatedBy = DataService.GetValue<System.String>(Columns.CreatedBy, reader);
			CreatedOn = DataService.GetValue<System.DateTime>(Columns.CreatedOn, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.Int32 Type

		private System.Int32 _Type;

		public System.Int32 Type
		{
			get{return _Type;}
			set{MarkDirty();_Type = value;}
		}

		#endregion

		#region public System.String Title

		private System.String _Title;

		public System.String Title
		{
			get{return _Title;}
			set{MarkDirty();_Title = value;}
		}

		#endregion

		#region public System.String Message

		private System.String _Message;

		public System.String Message
		{
			get{return _Message;}
			set{MarkDirty();_Message = value;}
		}

		#endregion

		#region public System.String CreatedBy

		private System.String _CreatedBy;

		public System.String CreatedBy
		{
			get{return _CreatedBy;}
			set{MarkDirty();_CreatedBy = value;}
		}

		#endregion

		#region public System.DateTime CreatedOn

		private System.DateTime _CreatedOn;

		public System.DateTime CreatedOn
		{
			get{return _CreatedOn;}
			set{MarkDirty();_CreatedOn = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents Log
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent Log
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column Type = new Column("Type", DbType.Int32, typeof(System.Int32), "Type", false, false);
			public static readonly Column Title = new Column("Title", DbType.String, typeof(System.String), "Title", false, false);
			public static readonly Column Message = new Column("Message", DbType.String, typeof(System.String), "Message", false, false);
			public static readonly Column CreatedBy = new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", false, false);
			public static readonly Column CreatedOn = new Column("CreatedOn", DbType.DateTime, typeof(System.DateTime), "CreatedOn", false, false);
		}


		public static int Destroy(Column column, object value)
		{
			Log objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "Type", null, DbType.Int32 ) );

			Parameter pTitle = new Parameter( "Title", null, DbType.String );
			pTitle.Length = 255;
			parameters.Add( pTitle );

			Parameter pMessage = new Parameter( "Message", null, DbType.String );
			pMessage.Length = 2000;
			parameters.Add( pMessage );

			Parameter pCreatedBy = new Parameter( "CreatedBy", null, DbType.String );
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter( "CreatedOn", null, DbType.DateTime ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			parameters.Add( new Parameter("Type", Type, DbType.Int32) );

			Parameter pTitle = new Parameter("Title", Title, DbType.String);
			pTitle.Length = 255;
			parameters.Add( pTitle );

			Parameter pMessage = new Parameter("Message", Message, DbType.String);
			pMessage.Length = 2000;
			parameters.Add( pMessage );

			Parameter pCreatedBy = new Parameter("CreatedBy", CreatedBy, DbType.String);
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter("CreatedOn", CreatedOn, DbType.DateTime) );

			return parameters;
		}
	}
	#endregion

	#region ObjectStore
	/// <summary>
	/// A collection of ObjectStore
	/// </summary>
	[Serializable]
	public partial class ObjectStoreCollection : List<ObjectStore>
	{
		/// <summary>
		/// Hydrates a collection of ObjectStore. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of ObjectStore. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				ObjectStore obj = new ObjectStore ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of ObjectStore
		/// </summary>
		public static ObjectStoreCollection FetchAll()
		{
			Query q = ObjectStore .CreateQuery();
			ObjectStoreCollection itemCollection = new ObjectStoreCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of ObjectStore based on the supplied query
		/// </summary>
		public static ObjectStoreCollection FetchByQuery(Query q)
		{
			ObjectStoreCollection itemCollection = new ObjectStoreCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of ObjectStore based on the supplied query
		/// </summary>
		public static ObjectStoreCollection FetchByColumn(Column column, object value)
		{
			ObjectStoreCollection itemCollection = new ObjectStoreCollection();
			Query q = ObjectStore .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_ObjectStore table.
	/// </summary>
	[Serializable]
	public partial class ObjectStore : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static ObjectStore ()
		{
			_Table = new Table("graffiti_ObjectStore", "ObjectStore");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("Name", DbType.String, typeof(System.String), "Name", false, false));
			_Table.Columns.Add(new Column("Data", DbType.String, typeof(System.String), "Data", false, false));
			_Table.Columns.Add(new Column("Type", DbType.String, typeof(System.String), "Type", false, false));
			_Table.Columns.Add(new Column("CreatedOn", DbType.DateTime, typeof(System.DateTime), "CreatedOn", false, false));
			_Table.Columns.Add(new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false));
			_Table.Columns.Add(new Column("Content_Type", DbType.String, typeof(System.String), "ContentType", false, false));
			_Table.Columns.Add(new Column("Version", DbType.Int32, typeof(System.Int32), "Version", false, false));
			_Table.Columns.Add(new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false));
		}

		/// <summary>
		/// Fetches an instance of ObjectStore based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static ObjectStore FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static ObjectStore FetchByQuery(Query q)
		{
			ObjectStore item = new ObjectStore ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type ObjectStore
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public ObjectStore (){}
		/// <summary>
		/// Loads an instance of ObjectStore for the supplied primary key value
		/// </summary>
		public ObjectStore (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of ObjectStore. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of ObjectStore. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			Name = DataService.GetValue<System.String>(Columns.Name, reader);
			Data = DataService.GetValue<System.String>(Columns.Data, reader);
			Type = DataService.GetValue<System.String>(Columns.Type, reader);
			CreatedOn = DataService.GetValue<System.DateTime>(Columns.CreatedOn, reader);
			ModifiedOn = DataService.GetValue<System.DateTime>(Columns.ModifiedOn, reader);
			ContentType = DataService.GetValue<System.String>(Columns.ContentType, reader);
			Version = DataService.GetValue<System.Int32>(Columns.Version, reader);
			UniqueId = DataService.GetValue<System.Guid>(Columns.UniqueId, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.String Name

		private System.String _Name;

		public System.String Name
		{
			get{return _Name;}
			set{MarkDirty();_Name = value;}
		}

		#endregion

		#region public System.String Data

		private System.String _Data;

		public System.String Data
		{
			get{return _Data;}
			set{MarkDirty();_Data = value;}
		}

		#endregion

		#region public System.String Type

		private System.String _Type;

		public System.String Type
		{
			get{return _Type;}
			set{MarkDirty();_Type = value;}
		}

		#endregion

		#region public System.DateTime CreatedOn

		private System.DateTime _CreatedOn;

		public System.DateTime CreatedOn
		{
			get{return _CreatedOn;}
			set{MarkDirty();_CreatedOn = value;}
		}

		#endregion

		#region public System.DateTime ModifiedOn

		private System.DateTime _ModifiedOn;

		public System.DateTime ModifiedOn
		{
			get{return _ModifiedOn;}
			set{MarkDirty();_ModifiedOn = value;}
		}

		#endregion

		#region public System.String ContentType

		private System.String _ContentType;

		public System.String ContentType
		{
			get{return _ContentType;}
			set{MarkDirty();_ContentType = value;}
		}

		#endregion

		#region public System.Int32 Version

		private System.Int32 _Version;

		public System.Int32 Version
		{
			get{return _Version;}
			set{MarkDirty();_Version = value;}
		}

		#endregion

		#region public System.Guid UniqueId

		private System.Guid _UniqueId;

		public System.Guid UniqueId
		{
			get{return _UniqueId;}
			set{MarkDirty();_UniqueId = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents ObjectStore
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent ObjectStore
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column Name = new Column("Name", DbType.String, typeof(System.String), "Name", false, false);
			public static readonly Column Data = new Column("Data", DbType.String, typeof(System.String), "Data", false, false);
			public static readonly Column Type = new Column("Type", DbType.String, typeof(System.String), "Type", false, false);
			public static readonly Column CreatedOn = new Column("CreatedOn", DbType.DateTime, typeof(System.DateTime), "CreatedOn", false, false);
			public static readonly Column ModifiedOn = new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false);
			public static readonly Column ContentType = new Column("Content_Type", DbType.String, typeof(System.String), "ContentType", false, false);
			public static readonly Column Version = new Column("Version", DbType.Int32, typeof(System.Int32), "Version", false, false);
			public static readonly Column UniqueId = new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false);
		}


		public static int Destroy(Column column, object value)
		{
			ObjectStore objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			Parameter pName = new Parameter( "Name", null, DbType.String );
			pName.Length = 128;
			parameters.Add( pName );

			Parameter pData = new Parameter( "Data", null, DbType.String );
			pData.Length = 2147483647;
			parameters.Add( pData );

			Parameter pType = new Parameter( "Type", null, DbType.String );
			pType.Length = 255;
			parameters.Add( pType );

			parameters.Add( new Parameter( "CreatedOn", null, DbType.DateTime ) );

			parameters.Add( new Parameter( "ModifiedOn", null, DbType.DateTime ) );

			Parameter pContent_Type = new Parameter( "Content_Type", null, DbType.String );
			pContent_Type.Length = 128;
			parameters.Add( pContent_Type );

			parameters.Add( new Parameter( "Version", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "UniqueId", null, DbType.Guid ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			Parameter pName = new Parameter("Name", Name, DbType.String);
			pName.Length = 128;
			parameters.Add( pName );

			Parameter pData = new Parameter("Data", Data, DbType.String);
			pData.Length = 2147483647;
			parameters.Add( pData );

			Parameter pType = new Parameter("Type", Type, DbType.String);
			pType.Length = 255;
			parameters.Add( pType );

			parameters.Add( new Parameter("CreatedOn", CreatedOn, DbType.DateTime) );

			parameters.Add( new Parameter("ModifiedOn", ModifiedOn, DbType.DateTime) );

			Parameter pContent_Type = new Parameter("Content_Type", ContentType, DbType.String);
			pContent_Type.Length = 128;
			parameters.Add( pContent_Type );

			parameters.Add( new Parameter("Version", Version, DbType.Int32) );

			parameters.Add( new Parameter("UniqueId", UniqueId, DbType.Guid) );

			return parameters;
		}
	}
	#endregion

	#region PostStatistic
	/// <summary>
	/// A collection of PostStatistic
	/// </summary>
	[Serializable]
	public partial class PostStatisticCollection : List<PostStatistic>
	{
		/// <summary>
		/// Hydrates a collection of PostStatistic. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of PostStatistic. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				PostStatistic obj = new PostStatistic ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of PostStatistic
		/// </summary>
		public static PostStatisticCollection FetchAll()
		{
			Query q = PostStatistic .CreateQuery();
			PostStatisticCollection itemCollection = new PostStatisticCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of PostStatistic based on the supplied query
		/// </summary>
		public static PostStatisticCollection FetchByQuery(Query q)
		{
			PostStatisticCollection itemCollection = new PostStatisticCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of PostStatistic based on the supplied query
		/// </summary>
		public static PostStatisticCollection FetchByColumn(Column column, object value)
		{
			PostStatisticCollection itemCollection = new PostStatisticCollection();
			Query q = PostStatistic .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_Post_Statistics table.
	/// </summary>
	[Serializable]
	public partial class PostStatistic : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static PostStatistic ()
		{
			_Table = new Table("graffiti_Post_Statistics", "PostStatistic");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("PostId", DbType.Int32, typeof(System.Int32), "PostId", false, false));
			_Table.Columns.Add(new Column("DateViewed", DbType.DateTime, typeof(System.DateTime), "DateViewed", false, false));
		}

		/// <summary>
		/// Fetches an instance of PostStatistic based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static PostStatistic FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static PostStatistic FetchByQuery(Query q)
		{
			PostStatistic item = new PostStatistic ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type PostStatistic
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public PostStatistic (){}
		/// <summary>
		/// Loads an instance of PostStatistic for the supplied primary key value
		/// </summary>
		public PostStatistic (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of PostStatistic. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of PostStatistic. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			PostId = DataService.GetValue<System.Int32>(Columns.PostId, reader);
			DateViewed = DataService.GetValue<System.DateTime>(Columns.DateViewed, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.Int32 PostId

		private System.Int32 _PostId;

		public System.Int32 PostId
		{
			get{return _PostId;}
			set{MarkDirty();_PostId = value;}
		}

		#endregion

		#region public System.DateTime DateViewed

		private System.DateTime _DateViewed;

		public System.DateTime DateViewed
		{
			get{return _DateViewed;}
			set{MarkDirty();_DateViewed = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents PostStatistic
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent PostStatistic
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column PostId = new Column("PostId", DbType.Int32, typeof(System.Int32), "PostId", false, false);
			public static readonly Column DateViewed = new Column("DateViewed", DbType.DateTime, typeof(System.DateTime), "DateViewed", false, false);
		}


		public static int Destroy(Column column, object value)
		{
			PostStatistic objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "PostId", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "DateViewed", null, DbType.DateTime ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			parameters.Add( new Parameter("PostId", PostId, DbType.Int32) );

			parameters.Add( new Parameter("DateViewed", DateViewed, DbType.DateTime) );

			return parameters;
		}
	}
	#endregion

	#region Post
	/// <summary>
	/// A collection of Post
	/// </summary>
	[Serializable]
	public partial class PostCollection : List<Post>
	{
		/// <summary>
		/// Hydrates a collection of Post. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of Post. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				Post obj = new Post ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of Post
		/// </summary>
		public static PostCollection FetchAll()
		{
			Query q = Post .CreateQuery();
			PostCollection itemCollection = new PostCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Post based on the supplied query
		/// </summary>
		public static PostCollection FetchByQuery(Query q)
		{
			PostCollection itemCollection = new PostCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Post based on the supplied query
		/// </summary>
		public static PostCollection FetchByColumn(Column column, object value)
		{
			PostCollection itemCollection = new PostCollection();
			Query q = Post .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_Posts table.
	/// </summary>
	[Serializable]
	public partial class Post : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static Post ()
		{
			_Table = new Table("graffiti_Posts", "Post");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("Title", DbType.String, typeof(System.String), "Title", false, false));
			_Table.Columns.Add(new Column("PostBody", DbType.String, typeof(System.String), "PostBody", false, false));
			_Table.Columns.Add(new Column("CreatedOn", DbType.DateTime, typeof(System.DateTime), "CreatedOn", false, false));
			_Table.Columns.Add(new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false));
			_Table.Columns.Add(new Column("Status", DbType.Int32, typeof(System.Int32), "Status", false, false));
			_Table.Columns.Add(new Column("Content_Type", DbType.String, typeof(System.String), "ContentType", false, false));
			_Table.Columns.Add(new Column("Name", DbType.String, typeof(System.String), "Name", false, false));
			_Table.Columns.Add(new Column("Comment_Count", DbType.Int32, typeof(System.Int32), "CommentCount", false, false));
			_Table.Columns.Add(new Column("Tag_List", DbType.String, typeof(System.String), "TagList", true, false));
			_Table.Columns.Add(new Column("CategoryId", DbType.Int32, typeof(System.Int32), "CategoryId", false, false));
			_Table.Columns.Add(new Column("Version", DbType.Int32, typeof(System.Int32), "Version", false, false));
			_Table.Columns.Add(new Column("ModifiedBy", DbType.String, typeof(System.String), "ModifiedBy", true, false));
			_Table.Columns.Add(new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", true, false));
			_Table.Columns.Add(new Column("ExtendedBody", DbType.String, typeof(System.String), "ExtendedBody", false, false));
			_Table.Columns.Add(new Column("IsDeleted", DbType.Boolean, typeof(System.Boolean), "IsDeleted", false, false));
			_Table.Columns.Add(new Column("Published", DbType.DateTime, typeof(System.DateTime), "Published", false, false));
			_Table.Columns.Add(new Column("Pending_Comment_Count", DbType.Int32, typeof(System.Int32), "PendingCommentCount", false, false));
			_Table.Columns.Add(new Column("Views", DbType.Int32, typeof(System.Int32), "Views", false, false));
			_Table.Columns.Add(new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false));
			_Table.Columns.Add(new Column("EnableComments", DbType.Boolean, typeof(System.Boolean), "EnableComments", false, false));
			_Table.Columns.Add(new Column("PropertyKeys", DbType.String, typeof(System.String), "PropertyKeys", true, false));
			_Table.Columns.Add(new Column("PropertyValues", DbType.String, typeof(System.String), "PropertyValues", true, false));
			_Table.Columns.Add(new Column("UserName", DbType.String, typeof(System.String), "UserName", false, false));
			_Table.Columns.Add(new Column("Notes", DbType.String, typeof(System.String), "Notes", true, false));
			_Table.Columns.Add(new Column("ImageUrl", DbType.String, typeof(System.String), "ImageUrl", true, false));
			_Table.Columns.Add(new Column("MetaDescription", DbType.String, typeof(System.String), "MetaDescription", true, false));
			_Table.Columns.Add(new Column("MetaKeywords", DbType.String, typeof(System.String), "MetaKeywords", true, false));
			_Table.Columns.Add(new Column("IsPublished", DbType.Boolean, typeof(System.Boolean), "IsPublished", false, false));
			_Table.Columns.Add(new Column("SortOrder", DbType.Int32, typeof(System.Int32), "SortOrder", false, false));
			_Table.Columns.Add(new Column("ParentId", DbType.Int32, typeof(System.Int32), "ParentId", false, false));
			_Table.Columns.Add(new Column("IsHome", DbType.Boolean, typeof(System.Boolean), "IsHome", false, false));
			_Table.Columns.Add(new Column("HomeSortOrder", DbType.Int32, typeof(System.Int32), "HomeSortOrder", false, false));
		}

		/// <summary>
		/// Fetches an instance of Post based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static Post FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static Post FetchByQuery(Query q)
		{
			Post item = new Post ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type Post
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public Post (){}
		/// <summary>
		/// Loads an instance of Post for the supplied primary key value
		/// </summary>
		public Post (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of Post. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of Post. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			Title = DataService.GetValue<System.String>(Columns.Title, reader);
			PostBody = DataService.GetValue<System.String>(Columns.PostBody, reader);
			CreatedOn = DataService.GetValue<System.DateTime>(Columns.CreatedOn, reader);
			ModifiedOn = DataService.GetValue<System.DateTime>(Columns.ModifiedOn, reader);
			Status = DataService.GetValue<System.Int32>(Columns.Status, reader);
			ContentType = DataService.GetValue<System.String>(Columns.ContentType, reader);
			Name = DataService.GetValue<System.String>(Columns.Name, reader);
			CommentCount = DataService.GetValue<System.Int32>(Columns.CommentCount, reader);
			TagList = DataService.GetValue<System.String>(Columns.TagList, reader);
			CategoryId = DataService.GetValue<System.Int32>(Columns.CategoryId, reader);
			Version = DataService.GetValue<System.Int32>(Columns.Version, reader);
			ModifiedBy = DataService.GetValue<System.String>(Columns.ModifiedBy, reader);
			CreatedBy = DataService.GetValue<System.String>(Columns.CreatedBy, reader);
			ExtendedBody = DataService.GetValue<System.String>(Columns.ExtendedBody, reader);
			IsDeleted = DataService.GetValue<System.Boolean>(Columns.IsDeleted, reader);
			Published = DataService.GetValue<System.DateTime>(Columns.Published, reader);
			PendingCommentCount = DataService.GetValue<System.Int32>(Columns.PendingCommentCount, reader);
			Views = DataService.GetValue<System.Int32>(Columns.Views, reader);
			UniqueId = DataService.GetValue<System.Guid>(Columns.UniqueId, reader);
			EnableComments = DataService.GetValue<System.Boolean>(Columns.EnableComments, reader);
			PropertyKeys = DataService.GetValue<System.String>(Columns.PropertyKeys, reader);
			PropertyValues = DataService.GetValue<System.String>(Columns.PropertyValues, reader);
			UserName = DataService.GetValue<System.String>(Columns.UserName, reader);
			Notes = DataService.GetValue<System.String>(Columns.Notes, reader);
			ImageUrl = DataService.GetValue<System.String>(Columns.ImageUrl, reader);
			MetaDescription = DataService.GetValue<System.String>(Columns.MetaDescription, reader);
			MetaKeywords = DataService.GetValue<System.String>(Columns.MetaKeywords, reader);
			IsPublished = DataService.GetValue<System.Boolean>(Columns.IsPublished, reader);
			SortOrder = DataService.GetValue<System.Int32>(Columns.SortOrder, reader);
			ParentId = DataService.GetValue<System.Int32>(Columns.ParentId, reader);
			IsHome = DataService.GetValue<System.Boolean>(Columns.IsHome, reader);
			HomeSortOrder = DataService.GetValue<System.Int32>(Columns.HomeSortOrder, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.String Title

		private System.String _Title;

		public System.String Title
		{
			get{return _Title;}
			set{MarkDirty();_Title = value;}
		}

		#endregion

		#region public System.String PostBody

		private System.String _PostBody;

		public System.String PostBody
		{
			get{return _PostBody;}
			set{MarkDirty();_PostBody = value;}
		}

		#endregion

		#region public System.DateTime CreatedOn

		private System.DateTime _CreatedOn;

		public System.DateTime CreatedOn
		{
			get{return _CreatedOn;}
			set{MarkDirty();_CreatedOn = value;}
		}

		#endregion

		#region public System.DateTime ModifiedOn

		private System.DateTime _ModifiedOn;

		public System.DateTime ModifiedOn
		{
			get{return _ModifiedOn;}
			set{MarkDirty();_ModifiedOn = value;}
		}

		#endregion

		#region public System.Int32 Status

		private System.Int32 _Status;

		public System.Int32 Status
		{
			get{return _Status;}
			set{MarkDirty();_Status = value;}
		}

		#endregion

		#region public System.String ContentType

		private System.String _ContentType;

		public System.String ContentType
		{
			get{return _ContentType;}
			set{MarkDirty();_ContentType = value;}
		}

		#endregion

		#region public System.String Name

		private System.String _Name;

		public System.String Name
		{
			get{return _Name;}
			set{MarkDirty();_Name = value;}
		}

		#endregion

		#region public System.Int32 CommentCount

		private System.Int32 _CommentCount;

		public System.Int32 CommentCount
		{
			get{return _CommentCount;}
			set{MarkDirty();_CommentCount = value;}
		}

		#endregion

		#region public System.String TagList

		private System.String _TagList;

		public System.String TagList
		{
			get{return _TagList;}
			set{MarkDirty();_TagList = value;}
		}

		#endregion

		#region public System.Int32 CategoryId

		private System.Int32 _CategoryId;

		public System.Int32 CategoryId
		{
			get{return _CategoryId;}
			set{MarkDirty();_CategoryId = value;}
		}

		#endregion

		#region public System.Int32 Version

		private System.Int32 _Version;

		public System.Int32 Version
		{
			get{return _Version;}
			set{MarkDirty();_Version = value;}
		}

		#endregion

		#region public System.String ModifiedBy

		private System.String _ModifiedBy;

		public System.String ModifiedBy
		{
			get{return _ModifiedBy;}
			set{MarkDirty();_ModifiedBy = value;}
		}

		#endregion

		#region public System.String CreatedBy

		private System.String _CreatedBy;

		public System.String CreatedBy
		{
			get{return _CreatedBy;}
			set{MarkDirty();_CreatedBy = value;}
		}

		#endregion

		#region public System.String ExtendedBody

		private System.String _ExtendedBody;

		public System.String ExtendedBody
		{
			get{return _ExtendedBody;}
			set{MarkDirty();_ExtendedBody = value;}
		}

		#endregion

		#region public System.Boolean IsDeleted

		private System.Boolean _IsDeleted;

		public System.Boolean IsDeleted
		{
			get{return _IsDeleted;}
			set{MarkDirty();_IsDeleted = value;}
		}

		#endregion

		#region public System.DateTime Published

		private System.DateTime _Published;

		public System.DateTime Published
		{
			get{return _Published;}
			set{MarkDirty();_Published = value;}
		}

		#endregion

		#region public System.Int32 PendingCommentCount

		private System.Int32 _PendingCommentCount;

		public System.Int32 PendingCommentCount
		{
			get{return _PendingCommentCount;}
			set{MarkDirty();_PendingCommentCount = value;}
		}

		#endregion

		#region public System.Int32 Views

		private System.Int32 _Views;

		public System.Int32 Views
		{
			get{return _Views;}
			set{MarkDirty();_Views = value;}
		}

		#endregion

		#region public System.Guid UniqueId

		private System.Guid _UniqueId;

		public System.Guid UniqueId
		{
			get{return _UniqueId;}
			set{MarkDirty();_UniqueId = value;}
		}

		#endregion

		#region public System.Boolean EnableComments

		private System.Boolean _EnableComments;

		public System.Boolean EnableComments
		{
			get{return _EnableComments;}
			set{MarkDirty();_EnableComments = value;}
		}

		#endregion

		#region public System.String PropertyKeys

		private System.String _PropertyKeys;

		public System.String PropertyKeys
		{
			get{return _PropertyKeys;}
			set{MarkDirty();_PropertyKeys = value;}
		}

		#endregion

		#region public System.String PropertyValues

		private System.String _PropertyValues;

		public System.String PropertyValues
		{
			get{return _PropertyValues;}
			set{MarkDirty();_PropertyValues = value;}
		}

		#endregion

		#region public System.String UserName

		private System.String _UserName;

		public System.String UserName
		{
			get{return _UserName;}
			set{MarkDirty();_UserName = value;}
		}

		#endregion

		#region public System.String Notes

		private System.String _Notes;

		public System.String Notes
		{
			get{return _Notes;}
			set{MarkDirty();_Notes = value;}
		}

		#endregion

		#region public System.String ImageUrl

		private System.String _ImageUrl;

		public System.String ImageUrl
		{
			get{return _ImageUrl;}
			set{MarkDirty();_ImageUrl = value;}
		}

		#endregion

		#region public System.String MetaDescription

		private System.String _MetaDescription;

		public System.String MetaDescription
		{
			get{return _MetaDescription;}
			set{MarkDirty();_MetaDescription = value;}
		}

		#endregion

		#region public System.String MetaKeywords

		private System.String _MetaKeywords;

		public System.String MetaKeywords
		{
			get{return _MetaKeywords;}
			set{MarkDirty();_MetaKeywords = value;}
		}

		#endregion

		#region public System.Boolean IsPublished

		private System.Boolean _IsPublished;

		public System.Boolean IsPublished
		{
			get{return _IsPublished;}
			set{MarkDirty();_IsPublished = value;}
		}

		#endregion

		#region public System.Int32 SortOrder

		private System.Int32 _SortOrder;

		public System.Int32 SortOrder
		{
			get{return _SortOrder;}
			set{MarkDirty();_SortOrder = value;}
		}

		#endregion

		#region public System.Int32 ParentId

		private System.Int32 _ParentId;

		public System.Int32 ParentId
		{
			get{return _ParentId;}
			set{MarkDirty();_ParentId = value;}
		}

		#endregion

		#region public System.Boolean IsHome

		private System.Boolean _IsHome;

		public System.Boolean IsHome
		{
			get{return _IsHome;}
			set{MarkDirty();_IsHome = value;}
		}

		#endregion

		#region public System.Int32 HomeSortOrder

		private System.Int32 _HomeSortOrder;

		public System.Int32 HomeSortOrder
		{
			get{return _HomeSortOrder;}
			set{MarkDirty();_HomeSortOrder = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents Post
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent Post
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column Title = new Column("Title", DbType.String, typeof(System.String), "Title", false, false);
			public static readonly Column PostBody = new Column("PostBody", DbType.String, typeof(System.String), "PostBody", false, false);
			public static readonly Column CreatedOn = new Column("CreatedOn", DbType.DateTime, typeof(System.DateTime), "CreatedOn", false, false);
			public static readonly Column ModifiedOn = new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false);
			public static readonly Column Status = new Column("Status", DbType.Int32, typeof(System.Int32), "Status", false, false);
			public static readonly Column ContentType = new Column("Content_Type", DbType.String, typeof(System.String), "ContentType", false, false);
			public static readonly Column Name = new Column("Name", DbType.String, typeof(System.String), "Name", false, false);
			public static readonly Column CommentCount = new Column("Comment_Count", DbType.Int32, typeof(System.Int32), "CommentCount", false, false);
			public static readonly Column TagList = new Column("Tag_List", DbType.String, typeof(System.String), "TagList", true, false);
			public static readonly Column CategoryId = new Column("CategoryId", DbType.Int32, typeof(System.Int32), "CategoryId", false, false);
			public static readonly Column Version = new Column("Version", DbType.Int32, typeof(System.Int32), "Version", false, false);
			public static readonly Column ModifiedBy = new Column("ModifiedBy", DbType.String, typeof(System.String), "ModifiedBy", true, false);
			public static readonly Column CreatedBy = new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", true, false);
			public static readonly Column ExtendedBody = new Column("ExtendedBody", DbType.String, typeof(System.String), "ExtendedBody", false, false);
			public static readonly Column IsDeleted = new Column("IsDeleted", DbType.Boolean, typeof(System.Boolean), "IsDeleted", false, false);
			public static readonly Column Published = new Column("Published", DbType.DateTime, typeof(System.DateTime), "Published", false, false);
			public static readonly Column PendingCommentCount = new Column("Pending_Comment_Count", DbType.Int32, typeof(System.Int32), "PendingCommentCount", false, false);
			public static readonly Column Views = new Column("Views", DbType.Int32, typeof(System.Int32), "Views", false, false);
			public static readonly Column UniqueId = new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false);
			public static readonly Column EnableComments = new Column("EnableComments", DbType.Boolean, typeof(System.Boolean), "EnableComments", false, false);
			public static readonly Column PropertyKeys = new Column("PropertyKeys", DbType.String, typeof(System.String), "PropertyKeys", true, false);
			public static readonly Column PropertyValues = new Column("PropertyValues", DbType.String, typeof(System.String), "PropertyValues", true, false);
			public static readonly Column UserName = new Column("UserName", DbType.String, typeof(System.String), "UserName", false, false);
			public static readonly Column Notes = new Column("Notes", DbType.String, typeof(System.String), "Notes", true, false);
			public static readonly Column ImageUrl = new Column("ImageUrl", DbType.String, typeof(System.String), "ImageUrl", true, false);
			public static readonly Column MetaDescription = new Column("MetaDescription", DbType.String, typeof(System.String), "MetaDescription", true, false);
			public static readonly Column MetaKeywords = new Column("MetaKeywords", DbType.String, typeof(System.String), "MetaKeywords", true, false);
			public static readonly Column IsPublished = new Column("IsPublished", DbType.Boolean, typeof(System.Boolean), "IsPublished", false, false);
			public static readonly Column SortOrder = new Column("SortOrder", DbType.Int32, typeof(System.Int32), "SortOrder", false, false);
			public static readonly Column ParentId = new Column("ParentId", DbType.Int32, typeof(System.Int32), "ParentId", false, false);
			public static readonly Column IsHome = new Column("IsHome", DbType.Boolean, typeof(System.Boolean), "IsHome", false, false);
			public static readonly Column HomeSortOrder = new Column("HomeSortOrder", DbType.Int32, typeof(System.Int32), "HomeSortOrder", false, false);
		}

		public static int Delete(Column column, object value)
		{
			Post objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(false);
				int i = DataService.Delete(Table,column,value);
				objectToDelete.AfterRemove(false);
				return i;
			}

			return 0;
		}

		public static int Delete(object value)
		{
			return Delete(Columns.Id,value);
		}

		public static int Destroy(Column column, object value)
		{
			Post objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			Parameter pTitle = new Parameter( "Title", null, DbType.String );
			pTitle.Length = 255;
			parameters.Add( pTitle );

			Parameter pPostBody = new Parameter( "PostBody", null, DbType.String );
			pPostBody.Length = 2147483647;
			parameters.Add( pPostBody );

			parameters.Add( new Parameter( "CreatedOn", null, DbType.DateTime ) );

			parameters.Add( new Parameter( "ModifiedOn", null, DbType.DateTime ) );

			parameters.Add( new Parameter( "Status", null, DbType.Int32 ) );

			Parameter pContent_Type = new Parameter( "Content_Type", null, DbType.String );
			pContent_Type.Length = 50;
			parameters.Add( pContent_Type );

			Parameter pName = new Parameter( "Name", null, DbType.String );
			pName.Length = 255;
			parameters.Add( pName );

			parameters.Add( new Parameter( "Comment_Count", null, DbType.Int32 ) );

			Parameter pTag_List = new Parameter( "Tag_List", null, DbType.String );
			pTag_List.Length = 512;
			parameters.Add( pTag_List );

			parameters.Add( new Parameter( "CategoryId", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "Version", null, DbType.Int32 ) );

			Parameter pModifiedBy = new Parameter( "ModifiedBy", null, DbType.String );
			pModifiedBy.Length = 128;
			parameters.Add( pModifiedBy );

			Parameter pCreatedBy = new Parameter( "CreatedBy", null, DbType.String );
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			Parameter pExtendedBody = new Parameter( "ExtendedBody", null, DbType.String );
			pExtendedBody.Length = 2147483647;
			parameters.Add( pExtendedBody );

			parameters.Add( new Parameter( "IsDeleted", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "Published", null, DbType.DateTime ) );

			parameters.Add( new Parameter( "Pending_Comment_Count", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "Views", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "UniqueId", null, DbType.Guid ) );

			parameters.Add( new Parameter( "EnableComments", null, DbType.Boolean ) );

			Parameter pPropertyKeys = new Parameter( "PropertyKeys", null, DbType.String );
			pPropertyKeys.Length = 2147483647;
			parameters.Add( pPropertyKeys );

			Parameter pPropertyValues = new Parameter( "PropertyValues", null, DbType.String );
			pPropertyValues.Length = 2147483647;
			parameters.Add( pPropertyValues );

			Parameter pUserName = new Parameter( "UserName", null, DbType.String );
			pUserName.Length = 128;
			parameters.Add( pUserName );

			Parameter pNotes = new Parameter( "Notes", null, DbType.String );
			pNotes.Length = 2000;
			parameters.Add( pNotes );

			Parameter pImageUrl = new Parameter( "ImageUrl", null, DbType.String );
			pImageUrl.Length = 255;
			parameters.Add( pImageUrl );

			Parameter pMetaDescription = new Parameter( "MetaDescription", null, DbType.String );
			pMetaDescription.Length = 255;
			parameters.Add( pMetaDescription );

			Parameter pMetaKeywords = new Parameter( "MetaKeywords", null, DbType.String );
			pMetaKeywords.Length = 255;
			parameters.Add( pMetaKeywords );

			parameters.Add( new Parameter( "IsPublished", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "SortOrder", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "ParentId", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "IsHome", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "HomeSortOrder", null, DbType.Int32 ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			Parameter pTitle = new Parameter("Title", Title, DbType.String);
			pTitle.Length = 255;
			parameters.Add( pTitle );

			Parameter pPostBody = new Parameter("PostBody", PostBody, DbType.String);
			pPostBody.Length = 2147483647;
			parameters.Add( pPostBody );

			parameters.Add( new Parameter("CreatedOn", CreatedOn, DbType.DateTime) );

			parameters.Add( new Parameter("ModifiedOn", ModifiedOn, DbType.DateTime) );

			parameters.Add( new Parameter("Status", Status, DbType.Int32) );

			Parameter pContent_Type = new Parameter("Content_Type", ContentType, DbType.String);
			pContent_Type.Length = 50;
			parameters.Add( pContent_Type );

			Parameter pName = new Parameter("Name", Name, DbType.String);
			pName.Length = 255;
			parameters.Add( pName );

			parameters.Add( new Parameter("Comment_Count", CommentCount, DbType.Int32) );

			Parameter pTag_List = new Parameter("Tag_List", TagList, DbType.String);
			pTag_List.Length = 512;
			parameters.Add( pTag_List );

			parameters.Add( new Parameter("CategoryId", CategoryId, DbType.Int32) );

			parameters.Add( new Parameter("Version", Version, DbType.Int32) );

			Parameter pModifiedBy = new Parameter("ModifiedBy", ModifiedBy, DbType.String);
			pModifiedBy.Length = 128;
			parameters.Add( pModifiedBy );

			Parameter pCreatedBy = new Parameter("CreatedBy", CreatedBy, DbType.String);
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			Parameter pExtendedBody = new Parameter("ExtendedBody", ExtendedBody, DbType.String);
			pExtendedBody.Length = 2147483647;
			parameters.Add( pExtendedBody );

			parameters.Add( new Parameter("IsDeleted", IsDeleted, DbType.Boolean) );

			parameters.Add( new Parameter("Published", Published, DbType.DateTime) );

			parameters.Add( new Parameter("Pending_Comment_Count", PendingCommentCount, DbType.Int32) );

			parameters.Add( new Parameter("Views", Views, DbType.Int32) );

			parameters.Add( new Parameter("UniqueId", UniqueId, DbType.Guid) );

			parameters.Add( new Parameter("EnableComments", EnableComments, DbType.Boolean) );

			Parameter pPropertyKeys = new Parameter("PropertyKeys", PropertyKeys, DbType.String);
			pPropertyKeys.Length = 2147483647;
			parameters.Add( pPropertyKeys );

			Parameter pPropertyValues = new Parameter("PropertyValues", PropertyValues, DbType.String);
			pPropertyValues.Length = 2147483647;
			parameters.Add( pPropertyValues );

			Parameter pUserName = new Parameter("UserName", UserName, DbType.String);
			pUserName.Length = 128;
			parameters.Add( pUserName );

			Parameter pNotes = new Parameter("Notes", Notes, DbType.String);
			pNotes.Length = 2000;
			parameters.Add( pNotes );

			Parameter pImageUrl = new Parameter("ImageUrl", ImageUrl, DbType.String);
			pImageUrl.Length = 255;
			parameters.Add( pImageUrl );

			Parameter pMetaDescription = new Parameter("MetaDescription", MetaDescription, DbType.String);
			pMetaDescription.Length = 255;
			parameters.Add( pMetaDescription );

			Parameter pMetaKeywords = new Parameter("MetaKeywords", MetaKeywords, DbType.String);
			pMetaKeywords.Length = 255;
			parameters.Add( pMetaKeywords );

			parameters.Add( new Parameter("IsPublished", IsPublished, DbType.Boolean) );

			parameters.Add( new Parameter("SortOrder", SortOrder, DbType.Int32) );

			parameters.Add( new Parameter("ParentId", ParentId, DbType.Int32) );

			parameters.Add( new Parameter("IsHome", IsHome, DbType.Boolean) );

			parameters.Add( new Parameter("HomeSortOrder", HomeSortOrder, DbType.Int32) );

			return parameters;
		}
	}
	#endregion

	#region Tag
	/// <summary>
	/// A collection of Tag
	/// </summary>
	[Serializable]
	public partial class TagCollection : List<Tag>
	{
		/// <summary>
		/// Hydrates a collection of Tag. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of Tag. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				Tag obj = new Tag ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of Tag
		/// </summary>
		public static TagCollection FetchAll()
		{
			Query q = Tag .CreateQuery();
			TagCollection itemCollection = new TagCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Tag based on the supplied query
		/// </summary>
		public static TagCollection FetchByQuery(Query q)
		{
			TagCollection itemCollection = new TagCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of Tag based on the supplied query
		/// </summary>
		public static TagCollection FetchByColumn(Column column, object value)
		{
			TagCollection itemCollection = new TagCollection();
			Query q = Tag .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_Tags table.
	/// </summary>
	[Serializable]
	public partial class Tag : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static Tag ()
		{
			_Table = new Table("graffiti_Tags", "Tag");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("Name", DbType.String, typeof(System.String), "Name", false, false));
			_Table.Columns.Add(new Column("PostId", DbType.Int32, typeof(System.Int32), "PostId", false, false));
		}

		/// <summary>
		/// Fetches an instance of Tag based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static Tag FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static Tag FetchByQuery(Query q)
		{
			Tag item = new Tag ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type Tag
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public Tag (){}
		/// <summary>
		/// Loads an instance of Tag for the supplied primary key value
		/// </summary>
		public Tag (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of Tag. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of Tag. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			Name = DataService.GetValue<System.String>(Columns.Name, reader);
			PostId = DataService.GetValue<System.Int32>(Columns.PostId, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.String Name

		private System.String _Name;

		public System.String Name
		{
			get{return _Name;}
			set{MarkDirty();_Name = value;}
		}

		#endregion

		#region public System.Int32 PostId

		private System.Int32 _PostId;

		public System.Int32 PostId
		{
			get{return _PostId;}
			set{MarkDirty();_PostId = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents Tag
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent Tag
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column Name = new Column("Name", DbType.String, typeof(System.String), "Name", false, false);
			public static readonly Column PostId = new Column("PostId", DbType.Int32, typeof(System.Int32), "PostId", false, false);
		}


		public static int Destroy(Column column, object value)
		{
			Tag objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			Parameter pName = new Parameter( "Name", null, DbType.String );
			pName.Length = 128;
			parameters.Add( pName );

			parameters.Add( new Parameter( "PostId", null, DbType.Int32 ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			Parameter pName = new Parameter("Name", Name, DbType.String);
			pName.Length = 128;
			parameters.Add( pName );

			parameters.Add( new Parameter("PostId", PostId, DbType.Int32) );

			return parameters;
		}
	}
	#endregion

	#region UserRole
	/// <summary>
	/// A collection of UserRole
	/// </summary>
	[Serializable]
	public partial class UserRoleCollection : List<UserRole>
	{
		/// <summary>
		/// Hydrates a collection of UserRole. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of UserRole. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				UserRole obj = new UserRole ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of UserRole
		/// </summary>
		public static UserRoleCollection FetchAll()
		{
			Query q = UserRole .CreateQuery();
			UserRoleCollection itemCollection = new UserRoleCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of UserRole based on the supplied query
		/// </summary>
		public static UserRoleCollection FetchByQuery(Query q)
		{
			UserRoleCollection itemCollection = new UserRoleCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of UserRole based on the supplied query
		/// </summary>
		public static UserRoleCollection FetchByColumn(Column column, object value)
		{
			UserRoleCollection itemCollection = new UserRoleCollection();
			Query q = UserRole .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_UserRoles table.
	/// </summary>
	[Serializable]
	public partial class UserRole : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static UserRole ()
		{
			_Table = new Table("graffiti_UserRoles", "UserRole");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("UserId", DbType.Int32, typeof(System.Int32), "UserId", false, false));
			_Table.Columns.Add(new Column("RoleName", DbType.String, typeof(System.String), "RoleName", false, false));
		}

		/// <summary>
		/// Fetches an instance of UserRole based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static UserRole FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static UserRole FetchByQuery(Query q)
		{
			UserRole item = new UserRole ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type UserRole
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public UserRole (){}
		/// <summary>
		/// Loads an instance of UserRole for the supplied primary key value
		/// </summary>
		public UserRole (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of UserRole. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of UserRole. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			UserId = DataService.GetValue<System.Int32>(Columns.UserId, reader);
			RoleName = DataService.GetValue<System.String>(Columns.RoleName, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.Int32 UserId

		private System.Int32 _UserId;

		public System.Int32 UserId
		{
			get{return _UserId;}
			set{MarkDirty();_UserId = value;}
		}

		#endregion

		#region public System.String RoleName

		private System.String _RoleName;

		public System.String RoleName
		{
			get{return _RoleName;}
			set{MarkDirty();_RoleName = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents UserRole
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent UserRole
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column UserId = new Column("UserId", DbType.Int32, typeof(System.Int32), "UserId", false, false);
			public static readonly Column RoleName = new Column("RoleName", DbType.String, typeof(System.String), "RoleName", false, false);
		}


		public static int Destroy(Column column, object value)
		{
			UserRole objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "UserId", null, DbType.Int32 ) );

			Parameter pRoleName = new Parameter( "RoleName", null, DbType.String );
			pRoleName.Length = 128;
			parameters.Add( pRoleName );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			parameters.Add( new Parameter("UserId", UserId, DbType.Int32) );

			Parameter pRoleName = new Parameter("RoleName", RoleName, DbType.String);
			pRoleName.Length = 128;
			parameters.Add( pRoleName );

			return parameters;
		}
	}
	#endregion

	#region User
	/// <summary>
	/// A collection of User
	/// </summary>
	[Serializable]
	public partial class UserCollection : List<User>
	{
		/// <summary>
		/// Hydrates a collection of User. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of User. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				User obj = new User ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of User
		/// </summary>
		public static UserCollection FetchAll()
		{
			Query q = User .CreateQuery();
			UserCollection itemCollection = new UserCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of User based on the supplied query
		/// </summary>
		public static UserCollection FetchByQuery(Query q)
		{
			UserCollection itemCollection = new UserCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of User based on the supplied query
		/// </summary>
		public static UserCollection FetchByColumn(Column column, object value)
		{
			UserCollection itemCollection = new UserCollection();
			Query q = User .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_Users table. The object is also available on the Post object.
	/// </summary>
	[Serializable]
	public partial class User : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static User ()
		{
			_Table = new Table("graffiti_Users", "User");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("Name", DbType.String, typeof(System.String), "Name", false, false));
			_Table.Columns.Add(new Column("Email", DbType.String, typeof(System.String), "Email", false, false));
			_Table.Columns.Add(new Column("ProperName", DbType.String, typeof(System.String), "ProperName", true, false));
			_Table.Columns.Add(new Column("TimeZoneOffSet", DbType.Double, typeof(System.Double), "TimeZoneOffSet", false, false));
			_Table.Columns.Add(new Column("Bio", DbType.String, typeof(System.String), "Bio", true, false));
			_Table.Columns.Add(new Column("Avatar", DbType.String, typeof(System.String), "Avatar", true, false));
			_Table.Columns.Add(new Column("PublicEmail", DbType.String, typeof(System.String), "PublicEmail", true, false));
			_Table.Columns.Add(new Column("WebSite", DbType.String, typeof(System.String), "WebSite", true, false));
			_Table.Columns.Add(new Column("Password", DbType.String, typeof(System.String), "Password", false, false));
			_Table.Columns.Add(new Column("Password_Salt", DbType.String, typeof(System.String), "PasswordSalt", false, false));
			_Table.Columns.Add(new Column("PasswordFormat", DbType.Int32, typeof(System.Int32), "PasswordFormat", false, false));
			_Table.Columns.Add(new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false));
		}

		/// <summary>
		/// Fetches an instance of User based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static User FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static User FetchByQuery(Query q)
		{
			User item = new User ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type User
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public User (){}
		/// <summary>
		/// Loads an instance of User for the supplied primary key value
		/// </summary>
		public User (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of User. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of User. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			Name = DataService.GetValue<System.String>(Columns.Name, reader);
			Email = DataService.GetValue<System.String>(Columns.Email, reader);
			ProperName = DataService.GetValue<System.String>(Columns.ProperName, reader);
			TimeZoneOffSet = DataService.GetValue<System.Double>(Columns.TimeZoneOffSet, reader);
			Bio = DataService.GetValue<System.String>(Columns.Bio, reader);
			Avatar = DataService.GetValue<System.String>(Columns.Avatar, reader);
			PublicEmail = DataService.GetValue<System.String>(Columns.PublicEmail, reader);
			WebSite = DataService.GetValue<System.String>(Columns.WebSite, reader);
			Password = DataService.GetValue<System.String>(Columns.Password, reader);
			PasswordSalt = DataService.GetValue<System.String>(Columns.PasswordSalt, reader);
			PasswordFormat = DataService.GetValue<System.Int32>(Columns.PasswordFormat, reader);
			UniqueId = DataService.GetValue<System.Guid>(Columns.UniqueId, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.String Name

		private System.String _Name;

		public System.String Name
		{
			get{return _Name;}
			set{MarkDirty();_Name = value;}
		}

		#endregion

		#region public System.String Email

		private System.String _Email;

		public System.String Email
		{
			get{return _Email;}
			set{MarkDirty();_Email = value;}
		}

		#endregion

		#region public System.String ProperName

		private System.String _ProperName;

		public System.String ProperName
		{
			get{return _ProperName;}
			set{MarkDirty();_ProperName = value;}
		}

		#endregion

		#region public System.Double TimeZoneOffSet

		private System.Double _TimeZoneOffSet;

		public System.Double TimeZoneOffSet
		{
			get{return _TimeZoneOffSet;}
			set{MarkDirty();_TimeZoneOffSet = value;}
		}

		#endregion

		#region public System.String Bio

		private System.String _Bio;

		public System.String Bio
		{
			get{return _Bio;}
			set{MarkDirty();_Bio = value;}
		}

		#endregion

		#region public System.String Avatar

		private System.String _Avatar;

		public System.String Avatar
		{
			get{return _Avatar;}
			set{MarkDirty();_Avatar = value;}
		}

		#endregion

		#region public System.String PublicEmail

		private System.String _PublicEmail;

		public System.String PublicEmail
		{
			get{return _PublicEmail;}
			set{MarkDirty();_PublicEmail = value;}
		}

		#endregion

		#region public System.String WebSite

		private System.String _WebSite;

		public System.String WebSite
		{
			get{return _WebSite;}
			set{MarkDirty();_WebSite = value;}
		}

		#endregion

		#region public System.String Password

		private System.String _Password;

		public System.String Password
		{
			get{return _Password;}
			set{MarkDirty();_Password = value;}
		}

		#endregion

		#region public System.String PasswordSalt

		private System.String _PasswordSalt;

		public System.String PasswordSalt
		{
			get{return _PasswordSalt;}
			set{MarkDirty();_PasswordSalt = value;}
		}

		#endregion

		#region public System.Int32 PasswordFormat

		private System.Int32 _PasswordFormat;

		public System.Int32 PasswordFormat
		{
			get{return _PasswordFormat;}
			set{MarkDirty();_PasswordFormat = value;}
		}

		#endregion

		#region public System.Guid UniqueId

		private System.Guid _UniqueId;

		public System.Guid UniqueId
		{
			get{return _UniqueId;}
			set{MarkDirty();_UniqueId = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents User
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent User
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column Name = new Column("Name", DbType.String, typeof(System.String), "Name", false, false);
			public static readonly Column Email = new Column("Email", DbType.String, typeof(System.String), "Email", false, false);
			public static readonly Column ProperName = new Column("ProperName", DbType.String, typeof(System.String), "ProperName", true, false);
			public static readonly Column TimeZoneOffSet = new Column("TimeZoneOffSet", DbType.Double, typeof(System.Double), "TimeZoneOffSet", false, false);
			public static readonly Column Bio = new Column("Bio", DbType.String, typeof(System.String), "Bio", true, false);
			public static readonly Column Avatar = new Column("Avatar", DbType.String, typeof(System.String), "Avatar", true, false);
			public static readonly Column PublicEmail = new Column("PublicEmail", DbType.String, typeof(System.String), "PublicEmail", true, false);
			public static readonly Column WebSite = new Column("WebSite", DbType.String, typeof(System.String), "WebSite", true, false);
			public static readonly Column Password = new Column("Password", DbType.String, typeof(System.String), "Password", false, false);
			public static readonly Column PasswordSalt = new Column("Password_Salt", DbType.String, typeof(System.String), "PasswordSalt", false, false);
			public static readonly Column PasswordFormat = new Column("PasswordFormat", DbType.Int32, typeof(System.Int32), "PasswordFormat", false, false);
			public static readonly Column UniqueId = new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false);
		}


		public static int Destroy(Column column, object value)
		{
			User objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			Parameter pName = new Parameter( "Name", null, DbType.String );
			pName.Length = 128;
			parameters.Add( pName );

			Parameter pEmail = new Parameter( "Email", null, DbType.String );
			pEmail.Length = 128;
			parameters.Add( pEmail );

			Parameter pProperName = new Parameter( "ProperName", null, DbType.String );
			pProperName.Length = 255;
			parameters.Add( pProperName );

			parameters.Add( new Parameter( "TimeZoneOffSet", null, DbType.Double ) );

			Parameter pBio = new Parameter( "Bio", null, DbType.String );
			pBio.Length = 2000;
			parameters.Add( pBio );

			Parameter pAvatar = new Parameter( "Avatar", null, DbType.String );
			pAvatar.Length = 255;
			parameters.Add( pAvatar );

			Parameter pPublicEmail = new Parameter( "PublicEmail", null, DbType.String );
			pPublicEmail.Length = 255;
			parameters.Add( pPublicEmail );

			Parameter pWebSite = new Parameter( "WebSite", null, DbType.String );
			pWebSite.Length = 255;
			parameters.Add( pWebSite );

			Parameter pPassword = new Parameter( "Password", null, DbType.String );
			pPassword.Length = 128;
			parameters.Add( pPassword );

			Parameter pPassword_Salt = new Parameter( "Password_Salt", null, DbType.String );
			pPassword_Salt.Length = 128;
			parameters.Add( pPassword_Salt );

			parameters.Add( new Parameter( "PasswordFormat", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "UniqueId", null, DbType.Guid ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			Parameter pName = new Parameter("Name", Name, DbType.String);
			pName.Length = 128;
			parameters.Add( pName );

			Parameter pEmail = new Parameter("Email", Email, DbType.String);
			pEmail.Length = 128;
			parameters.Add( pEmail );

			Parameter pProperName = new Parameter("ProperName", ProperName, DbType.String);
			pProperName.Length = 255;
			parameters.Add( pProperName );

			parameters.Add( new Parameter("TimeZoneOffSet", TimeZoneOffSet, DbType.Double) );

			Parameter pBio = new Parameter("Bio", Bio, DbType.String);
			pBio.Length = 2000;
			parameters.Add( pBio );

			Parameter pAvatar = new Parameter("Avatar", Avatar, DbType.String);
			pAvatar.Length = 255;
			parameters.Add( pAvatar );

			Parameter pPublicEmail = new Parameter("PublicEmail", PublicEmail, DbType.String);
			pPublicEmail.Length = 255;
			parameters.Add( pPublicEmail );

			Parameter pWebSite = new Parameter("WebSite", WebSite, DbType.String);
			pWebSite.Length = 255;
			parameters.Add( pWebSite );

			Parameter pPassword = new Parameter("Password", Password, DbType.String);
			pPassword.Length = 128;
			parameters.Add( pPassword );

			Parameter pPassword_Salt = new Parameter("Password_Salt", PasswordSalt, DbType.String);
			pPassword_Salt.Length = 128;
			parameters.Add( pPassword_Salt );

			parameters.Add( new Parameter("PasswordFormat", PasswordFormat, DbType.Int32) );

			parameters.Add( new Parameter("UniqueId", UniqueId, DbType.Guid) );

			return parameters;
		}
	}
	#endregion

	#region VersionStore
	/// <summary>
	/// A collection of VersionStore
	/// </summary>
	[Serializable]
	public partial class VersionStoreCollection : List<VersionStore>
	{
		/// <summary>
		/// Hydrates a collection of VersionStore. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of VersionStore. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				VersionStore obj = new VersionStore ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of VersionStore
		/// </summary>
		public static VersionStoreCollection FetchAll()
		{
			Query q = VersionStore .CreateQuery();
			VersionStoreCollection itemCollection = new VersionStoreCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of VersionStore based on the supplied query
		/// </summary>
		public static VersionStoreCollection FetchByQuery(Query q)
		{
			VersionStoreCollection itemCollection = new VersionStoreCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of VersionStore based on the supplied query
		/// </summary>
		public static VersionStoreCollection FetchByColumn(Column column, object value)
		{
			VersionStoreCollection itemCollection = new VersionStoreCollection();
			Query q = VersionStore .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_VersionStore table.
	/// </summary>
	[Serializable]
	public partial class VersionStore : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static VersionStore ()
		{
			_Table = new Table("graffiti_VersionStore", "VersionStore");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false));
			_Table.Columns.Add(new Column("Data", DbType.String, typeof(System.String), "Data", false, false));
			_Table.Columns.Add(new Column("Type", DbType.String, typeof(System.String), "Type", false, false));
			_Table.Columns.Add(new Column("Version", DbType.Int32, typeof(System.Int32), "Version", false, false));
			_Table.Columns.Add(new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", false, false));
			_Table.Columns.Add(new Column("CreatedOn", DbType.DateTime, typeof(System.DateTime), "CreatedOn", false, false));
			_Table.Columns.Add(new Column("Name", DbType.String, typeof(System.String), "Name", false, false));
			_Table.Columns.Add(new Column("ItemId", DbType.Int32, typeof(System.Int32), "ItemId", false, false));
			_Table.Columns.Add(new Column("Notes", DbType.String, typeof(System.String), "Notes", false, false));
		}

		/// <summary>
		/// Fetches an instance of VersionStore based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static VersionStore FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static VersionStore FetchByQuery(Query q)
		{
			VersionStore item = new VersionStore ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type VersionStore
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public VersionStore (){}
		/// <summary>
		/// Loads an instance of VersionStore for the supplied primary key value
		/// </summary>
		public VersionStore (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of VersionStore. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of VersionStore. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			UniqueId = DataService.GetValue<System.Guid>(Columns.UniqueId, reader);
			Data = DataService.GetValue<System.String>(Columns.Data, reader);
			Type = DataService.GetValue<System.String>(Columns.Type, reader);
			Version = DataService.GetValue<System.Int32>(Columns.Version, reader);
			CreatedBy = DataService.GetValue<System.String>(Columns.CreatedBy, reader);
			CreatedOn = DataService.GetValue<System.DateTime>(Columns.CreatedOn, reader);
			Name = DataService.GetValue<System.String>(Columns.Name, reader);
			ItemId = DataService.GetValue<System.Int32>(Columns.ItemId, reader);
			Notes = DataService.GetValue<System.String>(Columns.Notes, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.Guid UniqueId

		private System.Guid _UniqueId;

		public System.Guid UniqueId
		{
			get{return _UniqueId;}
			set{MarkDirty();_UniqueId = value;}
		}

		#endregion

		#region public System.String Data

		private System.String _Data;

		public System.String Data
		{
			get{return _Data;}
			set{MarkDirty();_Data = value;}
		}

		#endregion

		#region public System.String Type

		private System.String _Type;

		public System.String Type
		{
			get{return _Type;}
			set{MarkDirty();_Type = value;}
		}

		#endregion

		#region public System.Int32 Version

		private System.Int32 _Version;

		public System.Int32 Version
		{
			get{return _Version;}
			set{MarkDirty();_Version = value;}
		}

		#endregion

		#region public System.String CreatedBy

		private System.String _CreatedBy;

		public System.String CreatedBy
		{
			get{return _CreatedBy;}
			set{MarkDirty();_CreatedBy = value;}
		}

		#endregion

		#region public System.DateTime CreatedOn

		private System.DateTime _CreatedOn;

		public System.DateTime CreatedOn
		{
			get{return _CreatedOn;}
			set{MarkDirty();_CreatedOn = value;}
		}

		#endregion

		#region public System.String Name

		private System.String _Name;

		public System.String Name
		{
			get{return _Name;}
			set{MarkDirty();_Name = value;}
		}

		#endregion

		#region public System.Int32 ItemId

		private System.Int32 _ItemId;

		public System.Int32 ItemId
		{
			get{return _ItemId;}
			set{MarkDirty();_ItemId = value;}
		}

		#endregion

		#region public System.String Notes

		private System.String _Notes;

		public System.String Notes
		{
			get{return _Notes;}
			set{MarkDirty();_Notes = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents VersionStore
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent VersionStore
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column UniqueId = new Column("UniqueId", DbType.Guid, typeof(System.Guid), "UniqueId", false, false);
			public static readonly Column Data = new Column("Data", DbType.String, typeof(System.String), "Data", false, false);
			public static readonly Column Type = new Column("Type", DbType.String, typeof(System.String), "Type", false, false);
			public static readonly Column Version = new Column("Version", DbType.Int32, typeof(System.Int32), "Version", false, false);
			public static readonly Column CreatedBy = new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", false, false);
			public static readonly Column CreatedOn = new Column("CreatedOn", DbType.DateTime, typeof(System.DateTime), "CreatedOn", false, false);
			public static readonly Column Name = new Column("Name", DbType.String, typeof(System.String), "Name", false, false);
			public static readonly Column ItemId = new Column("ItemId", DbType.Int32, typeof(System.Int32), "ItemId", false, false);
			public static readonly Column Notes = new Column("Notes", DbType.String, typeof(System.String), "Notes", false, false);
		}


		public static int Destroy(Column column, object value)
		{
			VersionStore objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "UniqueId", null, DbType.Guid ) );

			Parameter pData = new Parameter( "Data", null, DbType.String );
			pData.Length = 2147483647;
			parameters.Add( pData );

			Parameter pType = new Parameter( "Type", null, DbType.String );
			pType.Length = 128;
			parameters.Add( pType );

			parameters.Add( new Parameter( "Version", null, DbType.Int32 ) );

			Parameter pCreatedBy = new Parameter( "CreatedBy", null, DbType.String );
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter( "CreatedOn", null, DbType.DateTime ) );

			Parameter pName = new Parameter( "Name", null, DbType.String );
			pName.Length = 255;
			parameters.Add( pName );

			parameters.Add( new Parameter( "ItemId", null, DbType.Int32 ) );

			Parameter pNotes = new Parameter( "Notes", null, DbType.String );
			pNotes.Length = 2000;
			parameters.Add( pNotes );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			parameters.Add( new Parameter("UniqueId", UniqueId, DbType.Guid) );

			Parameter pData = new Parameter("Data", Data, DbType.String);
			pData.Length = 2147483647;
			parameters.Add( pData );

			Parameter pType = new Parameter("Type", Type, DbType.String);
			pType.Length = 128;
			parameters.Add( pType );

			parameters.Add( new Parameter("Version", Version, DbType.Int32) );

			Parameter pCreatedBy = new Parameter("CreatedBy", CreatedBy, DbType.String);
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter("CreatedOn", CreatedOn, DbType.DateTime) );

			Parameter pName = new Parameter("Name", Name, DbType.String);
			pName.Length = 255;
			parameters.Add( pName );

			parameters.Add( new Parameter("ItemId", ItemId, DbType.Int32) );

			Parameter pNotes = new Parameter("Notes", Notes, DbType.String);
			pNotes.Length = 2000;
			parameters.Add( pNotes );

			return parameters;
		}
	}
	#endregion

	#region TagWeight
	/// <summary>
	/// A collection of TagWeight
	/// </summary>
	[Serializable]
	public partial class TagWeightCollection : List<TagWeight>
	{
		/// <summary>
		/// Hydrates a collection of TagWeight. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of TagWeight. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				TagWeight obj = new TagWeight ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of TagWeight
		/// </summary>
		public static TagWeightCollection FetchAll()
		{
			Query q = TagWeight .CreateQuery();
			TagWeightCollection itemCollection = new TagWeightCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of TagWeight based on the supplied query
		/// </summary>
		public static TagWeightCollection FetchByQuery(Query q)
		{
			TagWeightCollection itemCollection = new TagWeightCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of TagWeight based on the supplied query
		/// </summary>
		public static TagWeightCollection FetchByColumn(Column column, object value)
		{
			TagWeightCollection itemCollection = new TagWeightCollection();
			Query q = TagWeight .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_TagWeights table.
	/// </summary>
	[Serializable]
	public partial class TagWeight : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static TagWeight ()
		{
			_Table = new Table("graffiti_TagWeights", "TagWeight");
			_Table.IsReadOnly = true;
			_Table.PrimaryKey = "";
			_Table.Columns.Add(new Column("Name", DbType.String, typeof(System.String), "Name", false, false));
			_Table.Columns.Add(new Column("WEIGHT", DbType.Int32, typeof(System.Int32), "Weight", false, false));
		}

		/// <summary>
		/// Fetches an instance of TagWeight based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static TagWeight FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static TagWeight FetchByQuery(Query q)
		{
			TagWeight item = new TagWeight ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type TagWeight
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public TagWeight (){}

		/// <summary>
		/// Hydrates an instance of TagWeight. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of TagWeight. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Name = DataService.GetValue<System.String>(Columns.Name, reader);
			Weight = DataService.GetValue<System.Int32>(Columns.Weight, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.String Name

		private System.String _Name;

		public System.String Name
		{
			get{return _Name;}
			set{MarkDirty();_Name = value;}
		}

		#endregion

		#region public System.Int32 Weight

		private System.Int32 _Weight;

		public System.Int32 Weight
		{
			get{return _Weight;}
			set{MarkDirty();_Weight = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents TagWeight
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent TagWeight
		/// </summary>
		public static class Columns
		{
			public static readonly Column Name = new Column("Name", DbType.String, typeof(System.String), "Name", false, false);
			public static readonly Column Weight = new Column("WEIGHT", DbType.Int32, typeof(System.Int32), "Weight", false, false);
		}

		protected override void SetPrimaryKey(int pkID)
		{
			throw new Exception("This table is readonly does not have a settable PK");
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Name", null, DbType.String ) );

			parameters.Add( new Parameter( "WEIGHT", null, DbType.Int32 ) );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			throw new Exception("This table is readonly and cannot be updated");
		}
	}
	#endregion

	#region RolePermissions
	/// <summary>
	/// A collection of RolePermissions
	/// </summary>
	[Serializable]
	public partial class RolePermissionsCollection : List<RolePermissions>
	{
		/// <summary>
		/// Hydrates a collection of RolePermissions. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of RolePermissions. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				RolePermissions obj = new RolePermissions ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of RolePermissions
		/// </summary>
		public static RolePermissionsCollection FetchAll()
		{
			Query q = RolePermissions .CreateQuery();
			RolePermissionsCollection itemCollection = new RolePermissionsCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of RolePermissions based on the supplied query
		/// </summary>
		public static RolePermissionsCollection FetchByQuery(Query q)
		{
			RolePermissionsCollection itemCollection = new RolePermissionsCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of RolePermissions based on the supplied query
		/// </summary>
		public static RolePermissionsCollection FetchByColumn(Column column, object value)
		{
			RolePermissionsCollection itemCollection = new RolePermissionsCollection();
			Query q = RolePermissions .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_RolePermissions table.
	/// </summary>
	[Serializable]
	public partial class RolePermissions : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static RolePermissions ()
		{
			_Table = new Table("graffiti_RolePermissions", "RolePermissions");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("RoleName", DbType.String, typeof(System.String), "RoleName", false, false));
			_Table.Columns.Add(new Column("HasRead", DbType.Boolean, typeof(System.Boolean), "HasRead", false, false));
			_Table.Columns.Add(new Column("HasEdit", DbType.Boolean, typeof(System.Boolean), "HasEdit", false, false));
			_Table.Columns.Add(new Column("HasPublish", DbType.Boolean, typeof(System.Boolean), "HasPublish", false, false));
			_Table.Columns.Add(new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", true, false));
			_Table.Columns.Add(new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false));
			_Table.Columns.Add(new Column("ModifiedBy", DbType.String, typeof(System.String), "ModifiedBy", true, false));
		}

		/// <summary>
		/// Fetches an instance of RolePermissions based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static RolePermissions FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static RolePermissions FetchByQuery(Query q)
		{
			RolePermissions item = new RolePermissions ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type RolePermissions
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public RolePermissions (){}
		/// <summary>
		/// Loads an instance of RolePermissions for the supplied primary key value
		/// </summary>
		public RolePermissions (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of RolePermissions. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of RolePermissions. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			RoleName = DataService.GetValue<System.String>(Columns.RoleName, reader);
			HasRead = DataService.GetValue<System.Boolean>(Columns.HasRead, reader);
			HasEdit = DataService.GetValue<System.Boolean>(Columns.HasEdit, reader);
			HasPublish = DataService.GetValue<System.Boolean>(Columns.HasPublish, reader);
			CreatedBy = DataService.GetValue<System.String>(Columns.CreatedBy, reader);
			ModifiedOn = DataService.GetValue<System.DateTime>(Columns.ModifiedOn, reader);
			ModifiedBy = DataService.GetValue<System.String>(Columns.ModifiedBy, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.String RoleName

		private System.String _RoleName;

		public System.String RoleName
		{
			get{return _RoleName;}
			set{MarkDirty();_RoleName = value;}
		}

		#endregion

		#region public System.Boolean HasRead

		private System.Boolean _HasRead;

		public System.Boolean HasRead
		{
			get{return _HasRead;}
			set{MarkDirty();_HasRead = value;}
		}

		#endregion

		#region public System.Boolean HasEdit

		private System.Boolean _HasEdit;

		public System.Boolean HasEdit
		{
			get{return _HasEdit;}
			set{MarkDirty();_HasEdit = value;}
		}

		#endregion

		#region public System.Boolean HasPublish

		private System.Boolean _HasPublish;

		public System.Boolean HasPublish
		{
			get{return _HasPublish;}
			set{MarkDirty();_HasPublish = value;}
		}

		#endregion

		#region public System.String CreatedBy

		private System.String _CreatedBy;

		public System.String CreatedBy
		{
			get{return _CreatedBy;}
			set{MarkDirty();_CreatedBy = value;}
		}

		#endregion

		#region public System.DateTime ModifiedOn

		private System.DateTime _ModifiedOn;

		public System.DateTime ModifiedOn
		{
			get{return _ModifiedOn;}
			set{MarkDirty();_ModifiedOn = value;}
		}

		#endregion

		#region public System.String ModifiedBy

		private System.String _ModifiedBy;

		public System.String ModifiedBy
		{
			get{return _ModifiedBy;}
			set{MarkDirty();_ModifiedBy = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents RolePermissions
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent RolePermissions
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column RoleName = new Column("RoleName", DbType.String, typeof(System.String), "RoleName", false, false);
			public static readonly Column HasRead = new Column("HasRead", DbType.Boolean, typeof(System.Boolean), "HasRead", false, false);
			public static readonly Column HasEdit = new Column("HasEdit", DbType.Boolean, typeof(System.Boolean), "HasEdit", false, false);
			public static readonly Column HasPublish = new Column("HasPublish", DbType.Boolean, typeof(System.Boolean), "HasPublish", false, false);
			public static readonly Column CreatedBy = new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", true, false);
			public static readonly Column ModifiedOn = new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false);
			public static readonly Column ModifiedBy = new Column("ModifiedBy", DbType.String, typeof(System.String), "ModifiedBy", true, false);
		}


		public static int Destroy(Column column, object value)
		{
			RolePermissions objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			Parameter pRoleName = new Parameter( "RoleName", null, DbType.String );
			pRoleName.Length = 128;
			parameters.Add( pRoleName );

			parameters.Add( new Parameter( "HasRead", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "HasEdit", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "HasPublish", null, DbType.Boolean ) );

			Parameter pCreatedBy = new Parameter( "CreatedBy", null, DbType.String );
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter( "ModifiedOn", null, DbType.DateTime ) );

			Parameter pModifiedBy = new Parameter( "ModifiedBy", null, DbType.String );
			pModifiedBy.Length = 128;
			parameters.Add( pModifiedBy );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			Parameter pRoleName = new Parameter("RoleName", RoleName, DbType.String);
			pRoleName.Length = 128;
			parameters.Add( pRoleName );

			parameters.Add( new Parameter("HasRead", HasRead, DbType.Boolean) );

			parameters.Add( new Parameter("HasEdit", HasEdit, DbType.Boolean) );

			parameters.Add( new Parameter("HasPublish", HasPublish, DbType.Boolean) );

			Parameter pCreatedBy = new Parameter("CreatedBy", CreatedBy, DbType.String);
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter("ModifiedOn", ModifiedOn, DbType.DateTime) );

			Parameter pModifiedBy = new Parameter("ModifiedBy", ModifiedBy, DbType.String);
			pModifiedBy.Length = 128;
			parameters.Add( pModifiedBy );

			return parameters;
		}
	}
	#endregion

	#region RoleCategoryPermissions
	/// <summary>
	/// A collection of RoleCategoryPermissions
	/// </summary>
	[Serializable]
	public partial class RoleCategoryPermissionsCollection : List<RoleCategoryPermissions>
	{
		/// <summary>
		/// Hydrates a collection of RoleCategoryPermissions. In this case, the Reader should not be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates a collection of RoleCategoryPermissions. In this case, the Reader should not be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			while(reader.Read())
			{
				RoleCategoryPermissions obj = new RoleCategoryPermissions ();
				obj.Load(reader);
				this.Add(obj);
			}

			if(close)
				reader.Close();
		}

		/// <summary>
		/// Returns a collection containing all of the instances of RoleCategoryPermissions
		/// </summary>
		public static RoleCategoryPermissionsCollection FetchAll()
		{
			Query q = RoleCategoryPermissions .CreateQuery();
			RoleCategoryPermissionsCollection itemCollection = new RoleCategoryPermissionsCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of RoleCategoryPermissions based on the supplied query
		/// </summary>
		public static RoleCategoryPermissionsCollection FetchByQuery(Query q)
		{
			RoleCategoryPermissionsCollection itemCollection = new RoleCategoryPermissionsCollection();
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}

		/// <summary>
		/// Returns a collection of RoleCategoryPermissions based on the supplied query
		/// </summary>
		public static RoleCategoryPermissionsCollection FetchByColumn(Column column, object value)
		{
			RoleCategoryPermissionsCollection itemCollection = new RoleCategoryPermissionsCollection();
			Query q = RoleCategoryPermissions .CreateQuery();
			q.AndWhere(column,value);
			itemCollection.LoadAndCloseReader(q.ExecuteReader());
			return itemCollection;
		}
	}

	/// <summary>
	/// An object representing the graffiti_RoleCategoryPermissions table.
	/// </summary>
	[Serializable]
	public partial class RoleCategoryPermissions : DataBuddyBase
	{
		private static readonly Table _Table = null;

		static RoleCategoryPermissions ()
		{
			_Table = new Table("graffiti_RoleCategoryPermissions", "RoleCategoryPermissions");
			_Table.IsReadOnly = false;
			_Table.PrimaryKey = "Id";
			_Table.Columns.Add(new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true));
			_Table.Columns.Add(new Column("RoleName", DbType.String, typeof(System.String), "RoleName", false, false));
			_Table.Columns.Add(new Column("CategoryId", DbType.Int32, typeof(System.Int32), "CategoryId", false, false));
			_Table.Columns.Add(new Column("HasRead", DbType.Boolean, typeof(System.Boolean), "HasRead", false, false));
			_Table.Columns.Add(new Column("HasEdit", DbType.Boolean, typeof(System.Boolean), "HasEdit", false, false));
			_Table.Columns.Add(new Column("HasPublish", DbType.Boolean, typeof(System.Boolean), "HasPublish", false, false));
			_Table.Columns.Add(new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", true, false));
			_Table.Columns.Add(new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false));
			_Table.Columns.Add(new Column("ModifiedBy", DbType.String, typeof(System.String), "ModifiedBy", true, false));
		}

		/// <summary>
		/// Fetches an instance of RoleCategoryPermissions based on a single column value. If more than one record is found, only the first will be used.
		/// </summary>
		public static RoleCategoryPermissions FetchByColumn(Column column, object value)
		{
			Query q = new Query(_Table);
			q.AndWhere(column, value);
			return FetchByQuery(q);
		}

		public static RoleCategoryPermissions FetchByQuery(Query q)
		{
			RoleCategoryPermissions item = new RoleCategoryPermissions ();
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					item.LoadAndCloseReader(reader);
			}

			return item;
		}

		/// <summary>
		/// Creates an instance of Query for the type RoleCategoryPermissions
		/// </summary>
		public static Query CreateQuery()
		{
			return new Query(_Table);
		}

		public RoleCategoryPermissions (){}
		/// <summary>
		/// Loads an instance of RoleCategoryPermissions for the supplied primary key value
		/// </summary>
		public RoleCategoryPermissions (object keyValue)
		{
			Query q = new Query(_Table);
			q.AndWhere(Columns.Id, keyValue);
			using(IDataReader reader = q.ExecuteReader())
			{
				if(reader.Read())
					LoadAndCloseReader(reader);
			}
		}

		/// <summary>
		/// Hydrates an instance of RoleCategoryPermissions. In this case, the Reader should be in a read ready state. The reader will not be closed once it is done processing.
		/// </summary>
		public void Load(IDataReader reader)
		{
			Load(reader, false);
		}

		/// <summary>
		/// Hydrates an instance of RoleCategoryPermissions. In this case, the Reader should be in a read ready state. The reader will be closed once it is done processing.
		/// </summary>
		public void LoadAndCloseReader(IDataReader reader)
		{
			Load(reader, true);
		}

		private void Load(IDataReader reader, bool close)
		{
			Id = DataService.GetValue<System.Int32>(Columns.Id, reader);
			RoleName = DataService.GetValue<System.String>(Columns.RoleName, reader);
			CategoryId = DataService.GetValue<System.Int32>(Columns.CategoryId, reader);
			HasRead = DataService.GetValue<System.Boolean>(Columns.HasRead, reader);
			HasEdit = DataService.GetValue<System.Boolean>(Columns.HasEdit, reader);
			HasPublish = DataService.GetValue<System.Boolean>(Columns.HasPublish, reader);
			CreatedBy = DataService.GetValue<System.String>(Columns.CreatedBy, reader);
			ModifiedOn = DataService.GetValue<System.DateTime>(Columns.ModifiedOn, reader);
			ModifiedBy = DataService.GetValue<System.String>(Columns.ModifiedBy, reader);
			Loaded();
			ResetStatus();

			if(close)
				reader.Close();
		}

		#region public System.Int32 Id

		private System.Int32 _Id;

		public System.Int32 Id
		{
			get{return _Id;}
			set{MarkDirty();_Id = value;}
		}

		#endregion

		#region public System.String RoleName

		private System.String _RoleName;

		public System.String RoleName
		{
			get{return _RoleName;}
			set{MarkDirty();_RoleName = value;}
		}

		#endregion

		#region public System.Int32 CategoryId

		private System.Int32 _CategoryId;

		public System.Int32 CategoryId
		{
			get{return _CategoryId;}
			set{MarkDirty();_CategoryId = value;}
		}

		#endregion

		#region public System.Boolean HasRead

		private System.Boolean _HasRead;

		public System.Boolean HasRead
		{
			get{return _HasRead;}
			set{MarkDirty();_HasRead = value;}
		}

		#endregion

		#region public System.Boolean HasEdit

		private System.Boolean _HasEdit;

		public System.Boolean HasEdit
		{
			get{return _HasEdit;}
			set{MarkDirty();_HasEdit = value;}
		}

		#endregion

		#region public System.Boolean HasPublish

		private System.Boolean _HasPublish;

		public System.Boolean HasPublish
		{
			get{return _HasPublish;}
			set{MarkDirty();_HasPublish = value;}
		}

		#endregion

		#region public System.String CreatedBy

		private System.String _CreatedBy;

		public System.String CreatedBy
		{
			get{return _CreatedBy;}
			set{MarkDirty();_CreatedBy = value;}
		}

		#endregion

		#region public System.DateTime ModifiedOn

		private System.DateTime _ModifiedOn;

		public System.DateTime ModifiedOn
		{
			get{return _ModifiedOn;}
			set{MarkDirty();_ModifiedOn = value;}
		}

		#endregion

		#region public System.String ModifiedBy

		private System.String _ModifiedBy;

		public System.String ModifiedBy
		{
			get{return _ModifiedBy;}
			set{MarkDirty();_ModifiedBy = value;}
		}

		#endregion

		/// <summary>
		/// The table object which represents RoleCategoryPermissions
		/// </summary>
		public static Table Table { get{return _Table;}}

		/// <summary>
		/// The columns which represent RoleCategoryPermissions
		/// </summary>
		public static class Columns
		{
			public static readonly Column Id = new Column("Id", DbType.Int32, typeof(System.Int32), "Id", false, true);
			public static readonly Column RoleName = new Column("RoleName", DbType.String, typeof(System.String), "RoleName", false, false);
			public static readonly Column CategoryId = new Column("CategoryId", DbType.Int32, typeof(System.Int32), "CategoryId", false, false);
			public static readonly Column HasRead = new Column("HasRead", DbType.Boolean, typeof(System.Boolean), "HasRead", false, false);
			public static readonly Column HasEdit = new Column("HasEdit", DbType.Boolean, typeof(System.Boolean), "HasEdit", false, false);
			public static readonly Column HasPublish = new Column("HasPublish", DbType.Boolean, typeof(System.Boolean), "HasPublish", false, false);
			public static readonly Column CreatedBy = new Column("CreatedBy", DbType.String, typeof(System.String), "CreatedBy", true, false);
			public static readonly Column ModifiedOn = new Column("ModifiedOn", DbType.DateTime, typeof(System.DateTime), "ModifiedOn", false, false);
			public static readonly Column ModifiedBy = new Column("ModifiedBy", DbType.String, typeof(System.String), "ModifiedBy", true, false);
		}


		public static int Destroy(Column column, object value)
		{
			RoleCategoryPermissions objectToDelete = FetchByColumn(column, value);
			if(!objectToDelete.IsNew)
			{
				objectToDelete.BeforeRemove(true);
				int i = DataService.Destroy(Table,column,value);
				objectToDelete.AfterRemove(true);
				return i;
			}

			return 0;
		}


		public static int Destroy(object value)
		{
			return Destroy(Columns.Id, value);
		}
		protected override void SetPrimaryKey(int pkID)
		{
			Id = pkID;
		}

		protected override Table GetTable()
		{
			return Table;
		}

		public static Parameter FindParameter(List<Parameter> parameters, string name)
		{
			if( parameters == null )
				throw new ArgumentNullException("parameters");
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return parameters.Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		public static Parameter FindParameter(string name)
		{
			if( string.IsNullOrEmpty( name ) )
				throw new ArgumentNullException("name", "The value cannot be null or an empty string.");

			return GenerateParameters().Find( delegate(Parameter p) { return ( p.Name == name ); } );
		}

		#region public static List<Parameter> GenerateParameters()

		public static List<Parameter> GenerateParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			parameters.Add( new Parameter( "Id", null, DbType.Int32 ) );

			Parameter pRoleName = new Parameter( "RoleName", null, DbType.String );
			pRoleName.Length = 128;
			parameters.Add( pRoleName );

			parameters.Add( new Parameter( "CategoryId", null, DbType.Int32 ) );

			parameters.Add( new Parameter( "HasRead", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "HasEdit", null, DbType.Boolean ) );

			parameters.Add( new Parameter( "HasPublish", null, DbType.Boolean ) );

			Parameter pCreatedBy = new Parameter( "CreatedBy", null, DbType.String );
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter( "ModifiedOn", null, DbType.DateTime ) );

			Parameter pModifiedBy = new Parameter( "ModifiedBy", null, DbType.String );
			pModifiedBy.Length = 128;
			parameters.Add( pModifiedBy );

			return parameters;
		}

		#endregion

		protected override List<Parameter> GetParameters()
		{
			List<Parameter> parameters = new List<Parameter>(Table.Columns.Count);

			if(!IsNew)
			{
				parameters.Add( new Parameter("Id", Id, DbType.Int32) );
			}

			Parameter pRoleName = new Parameter("RoleName", RoleName, DbType.String);
			pRoleName.Length = 128;
			parameters.Add( pRoleName );

			parameters.Add( new Parameter("CategoryId", CategoryId, DbType.Int32) );

			parameters.Add( new Parameter("HasRead", HasRead, DbType.Boolean) );

			parameters.Add( new Parameter("HasEdit", HasEdit, DbType.Boolean) );

			parameters.Add( new Parameter("HasPublish", HasPublish, DbType.Boolean) );

			Parameter pCreatedBy = new Parameter("CreatedBy", CreatedBy, DbType.String);
			pCreatedBy.Length = 128;
			parameters.Add( pCreatedBy );

			parameters.Add( new Parameter("ModifiedOn", ModifiedOn, DbType.DateTime) );

			Parameter pModifiedBy = new Parameter("ModifiedBy", ModifiedBy, DbType.String);
			pModifiedBy.Length = 128;
			parameters.Add( pModifiedBy );

			return parameters;
		}
	}
	#endregion

}

